{"version":3,"file":"static/js/251.d4537fb8.chunk.js","mappings":"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","sources":["pages/Wallet/components/AddTokenPopup.tsx","pages/Wallet/styles.tsx","pages/CreateWallet/components/ProgressBar.tsx","pages/Wallet/components/TotalBalance.tsx","pages/Wallet/components/AccountInfo.tsx","pages/Wallet/components/ActivityTable.tsx","pages/Wallet/components/SendPopup.tsx","pages/Wallet/components/ReceivePopup.tsx","components/ChatInterface.tsx","components/TokensDataSingleton.ts","utils/ccai.ts","pages/Wallet/components/CloseTokenAccountPopup.tsx","pages/Wallet/index.tsx","routes/WalletRouter.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useWallet } from '../../../utils/wallet';\nimport { LAMPORTS_PER_SOL, PublicKey } from '@solana/web3.js';\nimport { useUpdateTokenName } from '../../../utils/tokens/names';\nimport { useAsyncData } from '../../../utils/fetch-loop';\nimport LoadingIndicator from '../../../components/LoadingIndicator';\nimport { useTheme } from '@mui/material';\nimport { useSendTransaction } from '../../../utils/notifications';\nimport {\n  abbreviateAddress,\n  formatNumberToUSFormat,\n  stripDigitPlaces,\n} from '../../../utils/utils';\nimport { usePopularTokens } from '../../../utils/tokens/names';\nimport Link from '@mui/material/Link';\nimport DialogForm from './DialogForm';\n// import { showSwapAddress } from '../../../utils/config';\nimport { swapApiRequest } from '../../../utils/swap/api';\nimport TokenIcon from '../../../components/TokenIcon';\nimport { InputWithPaste, InputWithSearch } from '../../../components/Input';\nimport {\n  Row,\n  Input,\n  ListCard,\n  RowContainer,\n  StyledCheckbox,\n  Title,\n  VioletButton,\n  WhiteButton,\n} from '../../commonStyles';\nimport { StyledTab, StyledTabs } from '../styles';\nimport FakeInputs from '../../../components/FakeInputs';\n\nconst WhiteText = styled(Title)`\n  font-size: 1.4rem;\n  font-family: Avenir Next Demi;\n`;\n\nconst GreenText = styled(WhiteText)`\n  color: ${(props) => props.theme.customPalette.green.light};\n`;\n\nexport const feeFormat = new Intl.NumberFormat(undefined, {\n  minimumFractionDigits: 6,\n  maximumFractionDigits: 6,\n});\n\nexport default function AddTokenDialog({\n  open,\n  onClose,\n  allTokensData,\n  balanceInfo,\n  refreshTokensData,\n}) {\n  let wallet = useWallet();\n  let [tokenAccountCost] = useAsyncData(\n    wallet.tokenAccountCost,\n    wallet.tokenAccountCost,\n  );\n  let updateTokenName = useUpdateTokenName();\n\n  const [sendTransaction, sending] = useSendTransaction();\n  const popularTokens = usePopularTokens();\n\n  const [tab, setTab] = useState(!!popularTokens ? 'popular' : 'manual');\n  const [searchValue, setSearchValue] = useState('');\n  const [mintAddress, setMintAddress] = useState('');\n  const [tokenName, setTokenName] = useState('');\n  const [tokenSymbol, setTokenSymbol] = useState('');\n  const [erc20Address, setErc20Address] = useState('');\n  const [selectedTokens, setSelectedTokens] = useState([]);\n\n  const theme = useTheme();\n  let { amount, decimals } = balanceInfo || {\n    amount: 0,\n    decimals: 8,\n  };\n\n  let valid = true;\n  if (tab === 'erc20') {\n    valid = erc20Address.length === 42 && erc20Address.startsWith('0x');\n  } else if (tab === 'manual') {\n    valid =\n      mintAddress !== '' &&\n      tokenSymbol !== '' &&\n      tokenSymbol.length <= 8 &&\n      tokenName !== '' &&\n      tokenName.length <= 16;\n  } else {\n    valid = selectedTokens.length > 0;\n  }\n\n  useEffect(() => {\n    if (!popularTokens) {\n      setTab('manual');\n    }\n  }, [popularTokens]);\n\n  function onSubmit() {\n    let params;\n    if (tab === 'manual') {\n      params = { mintAddress, tokenName, tokenSymbol };\n    } else if (tab === 'erc20') {\n      params = { erc20Address };\n    } else {\n      Promise.all(\n        selectedTokens.map((tokenInfo) => sendTransaction(addToken(tokenInfo))),\n      ).then(() => {\n        refreshTokensData();\n        onClose();\n      });\n\n      return;\n    }\n\n    sendTransaction(addToken(params), {\n      onSuccess: () => {\n        refreshTokensData();\n        onClose();\n      },\n    });\n  }\n\n  const cost =\n    tab === 'popular'\n      ? stripDigitPlaces(\n          (+feeFormat.format(tokenAccountCost / LAMPORTS_PER_SOL) || 0.002039) *\n            selectedTokens.length,\n          8,\n        )\n      : stripDigitPlaces(\n          +feeFormat.format(tokenAccountCost / LAMPORTS_PER_SOL) || 0.002039,\n          8,\n        );\n\n  const isBalanceLowerCost = amount < cost;\n  const isDisabled = sending || !valid || isBalanceLowerCost;\n\n  const handleKeyDown = (event: any) => {\n    if (event.key === 'Enter' && !isDisabled) {\n      onSubmit();\n    }\n  };\n\n  async function addToken({\n    mintAddress,\n    tokenName,\n    tokenSymbol,\n    erc20Address,\n  }) {\n    if (erc20Address) {\n      let tokenInfo = await swapApiRequest('POST', `coins/eth/${erc20Address}`);\n      mintAddress = tokenInfo.splMint;\n      tokenName = tokenInfo.name;\n      tokenSymbol = tokenInfo.ticker;\n      if (tokenInfo.blockchain !== 'sol') {\n        tokenName = 'Wrapped ' + tokenName;\n      }\n    }\n\n    let mint = new PublicKey(mintAddress);\n    updateTokenName(mint, tokenName, tokenSymbol);\n    const resp = await wallet.createAssociatedTokenAccount(mint);\n    return resp[1];\n  }\n\n  return (\n    <DialogForm\n      open={open}\n      onClose={onClose}\n      height={'auto'}\n      padding={'2rem 0'}\n      onEnter={() => {\n        setSelectedTokens([]);\n        setErc20Address('');\n        setSearchValue('');\n        setMintAddress('');\n        setTokenName('');\n        setTokenSymbol('');\n        setTab(!!popularTokens ? 'popular' : 'manual');\n      }}\n    >\n      <FakeInputs />\n      {!!popularTokens && (\n        <RowContainer margin=\"0 0 2rem 0\">\n          <StyledTabs\n            value={tab}\n            theme={theme}\n            onChange={(e, value) => setTab(value)}\n          >\n            <StyledTab theme={theme} label=\"Popular Tokens\" value=\"popular\" />\n            {/* {showSwapAddress ? (\n              <StyledTab theme={theme} label=\"ERC20 Token\" value=\"erc20\" />\n            ) : null} */}\n            <StyledTab theme={theme} label=\"Manual Input\" value=\"manual\" />\n          </StyledTabs>\n        </RowContainer>\n      )}\n      <RowContainer direction=\"column\">\n        <RowContainer margin=\"0 0 2rem 0\">\n          {tokenAccountCost ? (\n            <WhiteText theme={theme}>\n              Add a token to your wallet. This will cost{' '}\n              <GreenText theme={theme}>\n                {stripDigitPlaces(tokenAccountCost / LAMPORTS_PER_SOL, 6)} SOL\n              </GreenText>{' '}\n              per token.\n            </WhiteText>\n          ) : (\n            <LoadingIndicator />\n          )}\n        </RowContainer>\n\n        {tab === 'manual' || !popularTokens ? (\n          <>\n            <InputWithPaste\n              placeholder={'Token Mint Address'}\n              value={mintAddress}\n              onChange={(e) => setMintAddress(e.target.value)}\n              autoFocus\n              disabled={sending}\n              onKeyDown={handleKeyDown}\n              onPasteClick={() =>\n                navigator.clipboard\n                  .readText()\n                  .then((clipText) => setMintAddress(clipText))\n              }\n            />\n            <RowContainer width=\"90%\" margin={'2rem 0 0 0'}>\n              <Input\n                placeholder={'Token Name (e.g. SVMSeek)'}\n                value={tokenName}\n                onKeyDown={handleKeyDown}\n                onChange={(e) => setTokenName(e.target.value)}\n                disabled={sending}\n              />\n            </RowContainer>\n            {tokenName.length > 16 && (\n              <RowContainer width=\"90%\" margin=\"2rem 0 0 0\">\n                <Title color={theme.customPalette.red.main}>\n                  Sorry, token name shouldn't be longer than 16 symbols\n                </Title>\n              </RowContainer>\n            )}\n            <RowContainer width=\"90%\" margin={'2rem 0 0 0'}>\n              <Input\n                placeholder={'Token Symbol (e.g. RIN)'}\n                value={tokenSymbol}\n                onKeyDown={handleKeyDown}\n                onChange={(e) => setTokenSymbol(e.target.value)}\n                disabled={sending}\n              />\n            </RowContainer>\n            {tokenSymbol.length > 8 && (\n              <RowContainer width=\"90%\" margin=\"2rem 0 0 0\">\n                <Title color={theme.customPalette.red.main}>\n                  Sorry, token symbol shouldn't be longer than 8 symbols\n                </Title>\n              </RowContainer>\n            )}\n          </>\n        ) : tab === 'popular' ? (\n          <RowContainer width=\"90%\">\n            <RowContainer justify=\"flex-start\" direction=\"column\">\n              <WhiteText theme={theme}>\n                Select tokens you want to add to your wallet\n              </WhiteText>\n              <RowContainer margin=\"2rem 0\">\n                <InputWithSearch\n                  type={'text'}\n                  value={searchValue}\n                  onChange={(e) => {\n                    if (\n                      !`${e.target.value}`.match(/[a-zA-Z1-9]/) &&\n                      e.target.value !== ''\n                    ) {\n                      return;\n                    }\n\n                    setSearchValue(e.target.value);\n                  }}\n                  onSearchClick={() => {}}\n                  placeholder={'Search'}\n                />\n              </RowContainer>\n              <ListCard>\n                {popularTokens\n                  .filter(\n                    (tokenInfo) =>\n                      !tokenInfo.deprecated &&\n                      (searchValue !== ''\n                        ? (\n                            tokenInfo.name ??\n                            abbreviateAddress(new PublicKey(tokenInfo.address))\n                          )\n                            .toLowerCase()\n                            .includes(searchValue.toLowerCase()) ||\n                          tokenInfo.symbol\n                            .toLowerCase()\n                            .includes(searchValue.toLowerCase())\n                        : true),\n                  )\n                  .map((tokenInfo) => (\n                    <TokenListItem\n                      key={tokenInfo.address}\n                      {...tokenInfo}\n                      mintAddress={tokenInfo.address}\n                      existingAccount={([...allTokensData.values()] || []).find(\n                        (tokenData) => tokenData.mint === tokenInfo.address,\n                      )}\n                      disabled={sending}\n                      selectedTokens={selectedTokens}\n                      setSelectedTokens={setSelectedTokens}\n                    />\n                  ))}\n              </ListCard>\n            </RowContainer>\n          </RowContainer>\n        ) : tab === 'erc20' ? (\n          <>\n            <InputWithPaste\n              placeholder={'ERC20 Contract Address'}\n              value={erc20Address}\n              onChange={(e) => setErc20Address(e.target.value.trim())}\n              autoFocus\n              disabled={sending}\n              onPasteClick={() =>\n                navigator.clipboard\n                  .readText()\n                  .then((clipText) => setMintAddress(clipText))\n              }\n            />\n            {erc20Address && valid ? (\n              <Link\n                href={`https://etherscan.io/token/${erc20Address}`}\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                View on Etherscan\n              </Link>\n            ) : null}\n          </>\n        ) : null}\n        <RowContainer width=\"90%\" justify=\"space-between\" margin=\"2rem 0 0 0\">\n          <WhiteText theme={theme}>\n            Your SOL Balance:{' '}\n            <WhiteText\n              theme={theme}\n              style={{\n                color: isBalanceLowerCost\n                  ? theme.customPalette.red.main\n                  : theme.customPalette.green.light,\n              }}\n            >\n              {formatNumberToUSFormat(stripDigitPlaces(amount, decimals))} SOL\n            </WhiteText>\n          </WhiteText>\n          <WhiteText theme={theme}>\n            Cost: <GreenText theme={theme}>{cost} SOL</GreenText>\n          </WhiteText>\n        </RowContainer>\n        <RowContainer width=\"90%\" justify=\"space-between\" margin=\"2rem 0 0 0\">\n          <WhiteButton\n            width=\"calc(50% - .5rem)\"\n            theme={theme}\n            onClick={onClose}\n          >\n            Cancel\n          </WhiteButton>\n          <VioletButton\n            theme={theme}\n            width=\"calc(50% - .5rem)\"\n            disabled={isDisabled}\n            onClick={() => onSubmit()}\n          >\n            Add\n          </VioletButton>\n        </RowContainer>\n      </RowContainer>\n    </DialogForm>\n  );\n}\n\nexport function TokenListItem({\n  name: tokenName,\n  logoUri,\n  symbol: tokenSymbol,\n  mintAddress,\n  disabled,\n  existingAccount,\n  selectedTokens,\n  setSelectedTokens,\n}: {\n  name: string;\n  logoUri: string;\n  symbol: string;\n  mintAddress: string;\n  disabled: boolean;\n  existingAccount: boolean;\n  selectedTokens: any[];\n  setSelectedTokens: any;\n}) {\n  const alreadyExists = !!existingAccount;\n\n  const theme = useTheme();\n  const selectedTokenIndex = selectedTokens.findIndex(\n    (token) => token.mintAddress === mintAddress,\n  );\n  const checked = selectedTokenIndex !== -1;\n  const isDisabled = disabled || alreadyExists;\n  const address = new PublicKey(mintAddress);\n\n  return (\n    <>\n      <RowContainer\n        key={`${tokenName}${tokenSymbol}${mintAddress}`}\n        justify=\"space-between\"\n        style={{\n          borderBottom: theme.customPalette.border.new,\n          cursor: 'pointer',\n          minHeight: '4.5rem',\n        }}\n        onClick={() => {\n          if (isDisabled) return;\n\n          if (checked) {\n            setSelectedTokens([\n              ...selectedTokens.slice(0, selectedTokenIndex),\n              ...selectedTokens.slice(selectedTokenIndex + 1),\n            ]);\n          } else {\n            setSelectedTokens([\n              ...selectedTokens,\n              { tokenName, tokenSymbol, mintAddress },\n            ]);\n          }\n        }}\n      >\n        <Row>\n          <TokenIcon\n            tokenLogoUri={logoUri}\n            tokenName={tokenName}\n            size={'2rem'}\n          />\n          <WhiteText theme={theme} style={{ marginLeft: '1rem' }}>\n            {tokenName ?? abbreviateAddress(address)}\n            {tokenSymbol ? ` (${tokenSymbol})` : null}\n          </WhiteText>\n        </Row>\n        <StyledCheckbox\n          theme={theme}\n          checked={checked || isDisabled}\n          disabled={isDisabled}\n        />\n      </RowContainer>\n    </>\n  );\n}\n","import { Dialog, DialogContent, StepLabel, Tab, Tabs } from '@mui/material'\nimport styled from 'styled-components'\n\nexport const StyledDialogContent = styled(DialogContent)`\n  &&& {\n    width: ${(props) => props.width || '50rem'};\n    height: ${(props) => props.height || '40rem'};\n    background: #222429;\n    border: 0.1rem solid #3a475c;\n    box-shadow: 0px 0px 16px rgba(125, 125, 131, 0.1);\n    border-radius: 2rem;\n    display: flex;\n    justify-content: ${(props) => props.justify || 'center'};\n    flex-direction: column;\n    align-items: center;\n  }\n`\n\nexport const StyledDialog = styled(Dialog)`\n  &&& {\n    width: ${(props) => props.width || '50rem'};\n    height: ${(props) => props.height || '40rem'};\n    background: #222429;\n    border: 0.1rem solid #3a475c;\n    box-shadow: 0px 0px 16px rgba(125, 125, 131, 0.1);\n    border-radius: 2rem;\n    display: flex;\n    justify-content: ${(props) => props.justify || 'center'};\n    flex-direction: column;\n    align-items: center;\n  }\n`\n\nexport const StyledTabs = styled(Tabs)`\n  width: 90%;\n\n  .MuiTabs-flexContainer {\n    justify-content: center;\n  }\n  \n  & > div > span {\n    background: ${props => props.theme.customPalette.blue.serum} !important;\n  }\n`\n\nexport const StyledTab = styled(Tab)`\n  &&& {\n    min-width: auto;\n    color: ${props => props.theme.customPalette.blue.serum};\n    border-color: ${props => props.theme.customPalette.blue.serum};\n    text-transform: capitalize;\n    font-size: 1.4rem;\n    font-family: Avenir Next Demi;\n    white-space: nowrap;\n  }\n`\n\nexport const StyledStepLabel = styled(StepLabel)`\n  & span {\n    font-size: 1.4rem;\n  }\n\n  & svg {\n    width: 2rem;\n    height: 2rem;\n\n    text {\n      font-size: 1.4rem;\n    }\n  }\n`","import React from 'react';\nimport styled from 'styled-components';\nimport { RowContainer, Title } from '../../commonStyles';\n\nexport const Stroke = styled.div`\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 0.2rem solid #383b45;\n  width: 90%;\n  height: 4rem;\n`;\n\nconst ProgressBarContainer = styled.div`\n  position: relative;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  display: flex;\n`;\n\nconst Percent = styled.div`\n  position: absolute;\n  width: 0;\n  height: 100%;\n  border-bottom: 2px solid #4b81bd;\n  z-index: 1;\n  transition: width 1s;\n`;\n\nconst ProgressBar = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 50%;\n  border-bottom: 0.1rem solid transparent;\n  border-image: ${(props) =>\n    props.currentStep === 1\n      ? 'linear-gradient(90deg,rgb(115, 128, 235),rgb(147, 160, 178) 36%,rgb(147, 160, 178))'\n      : props.currentStep === 2\n      ? 'linear-gradient(90deg, rgb(64, 110, 220), rgb(115, 128, 235) 51%, rgb(147, 160, 178) 90%)'\n      : 'linear-gradient(90deg, #651CE4, #651CE4 51%, #651CE4 90%)'};\n  border-image-slice: 1;\n  z-index: -1;\n`;\n\nconst Step = styled.div`\n  width: 3.5rem;\n  height: 3.5rem;\n  background: ${(props) => (props.isCompleted ? '#406EDC' : '#17181a')};\n  color: #fff;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.4rem;\n  display: flex;\n  border: ${(props) =>\n    props.isSelected || props.isCompleted\n      ? '0.1rem solid #406EDC'\n      : '0.1rem solid #93A0B2'};\n  border-radius: 50%;\n  transition: background 1s;\n`;\n\nconst Steps = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 40rem;\n  height: 0.1rem;\n  background: ${(props) => (props.isCompleted ? '#651CE4' : 'none')};\n`;\n\nconst StepContainer = styled.div`\n  position: relative;\n`;\n\nconst AlignedTitle = styled(Title)`\n  position: absolute;\n  left: 50%;\n  top: calc(100% + 1rem);\n  transform: translateX(-50%);\n  white-space: nowrap;\n`;\n\nconst ProgressBarRow = styled(RowContainer)`\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: baseline;\n  padding: 0 0 7rem 0;\n  @media (max-width: 540px) {\n    margin-top: ${(props) => (props.currentStep === 3 ? '45rem' : 'none')};\n  }\n  ${(props) => props.style}\n`;\n\nconst ProgressBarComponent = ({\n  currentStep,\n  firstStepText = 'Create Password',\n  secondStepText = 'Confirm Seed Phrase',\n  thirdStepText = 'Add Tokens',\n  style = {},\n}: {\n  currentStep: number;\n  firstStepText?: string;\n  secondStepText?: string;\n  thirdStepText?: string;\n  style?: any;\n}) => {\n  return (\n    <ProgressBarRow currentStep={currentStep} style={style}>\n      <ProgressBarContainer>\n        <ProgressBar currentStep={currentStep}>\n          <Percent />\n        </ProgressBar>\n\n        <Steps isCompleted={currentStep === 3}>\n          <StepContainer>\n            {' '}\n            <Step\n              isCompleted={currentStep > 1}\n              isSelected={currentStep === 1}\n              id=\"1\"\n            >\n              1\n            </Step>\n            <AlignedTitle>{firstStepText}</AlignedTitle>\n          </StepContainer>\n          <StepContainer>\n            <Step\n              isCompleted={currentStep > 2}\n              isSelected={currentStep === 2}\n              id=\"2\"\n            >\n              2\n            </Step>\n            <AlignedTitle>{secondStepText}</AlignedTitle>\n          </StepContainer>\n          <StepContainer>\n            <Step\n              isCompleted={currentStep > 3}\n              isSelected={currentStep === 3}\n              id=\"3\"\n            >\n              3\n            </Step>\n            <AlignedTitle>{thirdStepText}</AlignedTitle>\n          </StepContainer>\n        </Steps>\n      </ProgressBarContainer>\n    </ProgressBarRow>\n  );\n};\n\nexport default ProgressBarComponent;\n","import React from 'react';\nimport {\n  formatNumberToUSFormat,\n  isUSDToken,\n  stripDigitPlaces,\n  TokenInfo,\n} from '../../../utils/utils';\n\nconst TotalBalance = ({\n  allTokensData,\n  tokensData,\n}: {\n  allTokensData: Map<string, TokenInfo>;\n  tokensData: Map<string, number>;\n}) => {\n  const totalUSD = [...allTokensData.values()].reduce((acc, cur) => {\n    const isTokenUSDT = isUSDToken(cur.symbol);\n\n    let tokenPrice = tokensData.get(`${cur.symbol}`) || 0;\n    if (isTokenUSDT) tokenPrice = 1;\n\n    return acc + cur.amount * tokenPrice;\n  }, 0);\n\n  return (\n    <>\n      <span key={`total-balance`}>\n        ${formatNumberToUSFormat(stripDigitPlaces(totalUSD, 2))}\n      </span>\n    </>\n  );\n};\n\nexport default TotalBalance;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useTheme } from '@mui/material';\n\nimport copy from 'clipboard-copy';\nimport GlassContainer from '../../../components/GlassContainer';\n\nimport { useBalanceInfo, useWallet } from '../../../utils/wallet';\nimport { Row, RowContainer, Title, ExclamationMark } from '../../commonStyles';\nimport {\n  abbreviateAddress,\n  formatNumberToUSFormat,\n  stripDigitPlaces,\n  TokenInfo,\n} from '../../../utils/utils';\n\nimport AccountsSelector from './AccountsSelector';\nimport TotalBalance from './TotalBalance';\nimport { useSnackbar } from 'notistack';\nimport { PublicKey } from '@solana/web3.js';\n\nconst MobilePublicKeyTitle = styled(Title)`\n  display: none;\n\n  @media (max-width: 540px) {\n    display: inline;\n  }\n`;\n\nconst DesktopPublicKeyTitle = styled(Title)`\n  display: inline;\n  white-space: nowrap;\n  @media (max-width: 540px) {\n    display: none;\n  }\n`;\n\nconst AccountInfoContainer = styled(RowContainer)`\n  width: 100%;\n  height: auto;\n  padding: 5rem 4rem;\n\n  @media (max-width: 540px) {\n    height: 40%;\n    flex-direction: column;\n    padding: 0 0 3rem 0;\n  }\n`;\n\nconst AccountInfoSubContainer = styled(Row)`\n  width: 40%;\n  height: 100%;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: space-between;\n\n  @media (max-width: 540px) {\n    width: 100%;\n    padding: 5rem 3rem;\n  }\n`;\n\nconst AccountInfoFirstContainer = styled(RowContainer)`\n  @media (max-width: 540px) {\n    border-bottom: 0.1rem solid #3a475c;\n  }\n`;\n\nconst Instruction = styled(({ showOnMobile, ...props }) => <Row {...props} />)`\n  display: ${(props) => (props.showOnMobile ? 'none' : 'flex')};\n  height: 100%;\n\n  @media (max-width: 540px) {\n    display: ${(props) => (props.showOnMobile ? 'flex' : 'none')};\n    height: 50%;\n    padding-right: 3rem;\n  }\n`;\n\nconst Balances = styled(Row)`\n  width: 60%;\n  height: 100%;\n  justify-content: flex-end;\n  @media (max-width: 540px) {\n    width: 100%;\n    margin-top: 3rem;\n    padding: 0 3rem;\n  }\n`;\n\nconst BalanceCard = styled(({ needLeftMargin, ...props }) => (\n  <GlassContainer {...props} />\n))`\n  display: flex;\n  width: 26rem;\n  height: 100%;\n  margin: ${(props) => props.margin || '0 4rem 0 0'};\n  padding: 1rem 1.5rem;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: space-between;\n  background: ${(props) =>\n    props.background || 'linear-gradient(135deg, rgba(19, 49, 173, 0.8) 0%, rgba(59, 141, 23, 0.8) 100%) !important'};\n  border-radius: 1.2rem;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  \n  &:hover {\n    transform: translateY(-4px) scale(1.02);\n    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.2);\n  }\n  \n  @media (max-width: 540px) {\n    margin: 0;\n    width: 48%;\n    height: 8rem;\n    border-radius: 2rem;\n    margin-left: ${(props) => (props.needLeftMargin ? '4%' : 0)};\n  }\n`;\n\nconst InstructionTitle = styled(Title)`\n  @media (max-width: 540px) {\n    font-size: 1.3rem;\n  }\n`;\n\nconst InstructionsBlock = ({ theme, showOnMobile = false }) => {\n  return (\n    <Instruction showOnMobile={showOnMobile}>\n      <Row\n        height=\"100%\"\n        direction=\"column\"\n        justify=\"space-around\"\n        align=\"flex-start\"\n      >\n        <InstructionTitle\n          fontFamily=\"Avenir Next\"\n          fontSize=\"1.4rem\"\n          color={theme.customPalette.green.main}\n          style={{ whiteSpace: 'nowrap' }}\n        >\n          SOL is the fuel for transactions on Solana.\n        </InstructionTitle>\n        <InstructionTitle\n          fontFamily=\"Avenir Next\"\n          fontSize=\"1.4rem\"\n          color={theme.customPalette.green.main}\n          style={{ whiteSpace: 'nowrap' }}\n        >\n          You must have some SOL in your wallet for\n        </InstructionTitle>\n        <InstructionTitle\n          fontFamily=\"Avenir Next\"\n          fontSize=\"1.4rem\"\n          color={theme.customPalette.green.main}\n          style={{ whiteSpace: 'nowrap' }}\n        >\n          DEX trading or other transactions.\n        </InstructionTitle>\n      </Row>\n      <ExclamationMark\n        color={theme.customPalette.green.main}\n        theme={theme}\n        margin={'0 0 0 2rem'}\n        fontSize=\"7rem\"\n      />\n    </Instruction>\n  );\n};\n\nconst AccountInfo = ({\n  allTokensData,\n  tokensData,\n}: {\n  allTokensData: Map<string, TokenInfo>;\n  tokensData: Map<string, number>;\n}) => {\n  const theme = useTheme();\n  const wallet = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const balanceInfo = useBalanceInfo(wallet.publicKey);\n  let { amount, decimals } = balanceInfo || {\n    amount: 0,\n    decimals: 8,\n    mint: null,\n    tokenName: 'Loading...',\n    tokenSymbol: '--',\n  };\n\n  const publicKey = wallet.publicKey.toBase58();\n\n  return (\n    <AccountInfoContainer>\n      <AccountInfoFirstContainer justify=\"flex-start\">\n        <AccountInfoSubContainer>\n          <AccountsSelector />\n          <DesktopPublicKeyTitle color={theme.customPalette.grey.light}>\n            {publicKey}{' '}\n            <Title\n              style={{\n                marginLeft: '2rem',\n                color: '#651CE4',\n                cursor: 'pointer',\n              }}\n              onClick={() => {\n                copy(publicKey);\n\n                enqueueSnackbar('Copied!', { variant: 'success' });\n              }}\n            >\n              Copy\n            </Title>\n          </DesktopPublicKeyTitle>\n          <MobilePublicKeyTitle\n            style={{ whiteSpace: 'nowrap' }}\n            color={theme.customPalette.grey.light}\n          >\n            {abbreviateAddress(new PublicKey(publicKey))}\n            <Title\n              style={{\n                marginLeft: '2rem',\n                color: '#651CE4',\n                cursor: 'pointer',\n              }}\n              onClick={() => {\n                copy(publicKey);\n\n                enqueueSnackbar('Copied!', { variant: 'success' });\n              }}\n            >\n              Copy\n            </Title>\n          </MobilePublicKeyTitle>\n        </AccountInfoSubContainer>\n        <InstructionsBlock showOnMobile theme={theme} />\n      </AccountInfoFirstContainer>\n\n      <Balances>\n        <BalanceCard\n          margin=\"0 2rem 0 0\"\n          background=\"linear-gradient(135deg, #1331AD 0%, #95363F 100%)\"\n        >\n          <Title\n            fontSize=\"1.4rem\"\n            fontFamily={'Avenir Next Demi'}\n            color={theme.customPalette.grey.light}\n            maxFont={'2rem'}\n          >\n            Total Balance\n          </Title>\n          <Title\n            maxFont={'2.1rem'}\n            fontSize=\"2.4rem\"\n            fontFamily={'Avenir Next Demi'}\n          >\n            <TotalBalance\n              allTokensData={allTokensData}\n              tokensData={tokensData}\n              key=\"navbarfalse\"\n            />\n          </Title>\n        </BalanceCard>\n        <BalanceCard needLeftMargin>\n          <Title\n            fontSize=\"1.4rem\"\n            fontFamily={'Avenir Next Demi'}\n            color={theme.customPalette.grey.light}\n            maxFont={'2rem'}\n          >\n            SOL Balance\n          </Title>\n          <Title\n            maxFont={'2.1rem'}\n            fontSize=\"2.4rem\"\n            fontFamily={'Avenir Next Demi'}\n          >\n            {formatNumberToUSFormat(\n              stripDigitPlaces(amount / Math.pow(10, decimals), 8),\n            )}{' '}\n            SOL\n          </Title>\n        </BalanceCard>\n        <InstructionsBlock theme={theme} />\n      </Balances>\n    </AccountInfoContainer>\n  );\n};\n\nexport default React.memo(AccountInfo, (prev, next) => {\n  return (\n    JSON.stringify([...prev.allTokensData.values()]) ===\n      JSON.stringify([...next.allTokensData.values()]) &&\n    JSON.stringify([...prev.tokensData.values()]) ===\n      JSON.stringify([...next.tokensData.values()])\n  );\n});\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useTheme } from '@mui/material';\nimport { TableContainer, HeadRow, GreyTitle } from './AssetsTable';\nimport { RowContainer, Title } from '../../commonStyles';\n\nconst StyledActivityTable = styled(TableContainer)`\n  width: calc(15% - 1rem);\n  flex-direction: column;\n  @media (max-width: 540px) {\n    display: ${(props) => (props.isActive ? 'block' : 'none')};\n  }\n`;\n\nconst ActivityHeaderRow = styled(RowContainer)`\n  height: 5rem;\n  @media (max-width: 540px) {\n    display: none;\n  }\n`;\n\nconst ComingSoonTitle = styled(Title)`\n  @media (max-width: 540px) {\n    font-size: 2rem;\n    white-space: nowrap;\n  }\n`;\n\nconst ActivityTable = ({ isActive }: { isActive?: boolean }) => {\n  const theme = useTheme();\n  return (\n    <StyledActivityTable isActive={isActive} theme={theme}>\n      <ActivityHeaderRow>\n        <HeadRow\n          theme={theme}\n          justify=\"flex-start\"\n          style={{ width: '100%', padding: '1.4rem 0 1.4rem 2.4rem' }}\n        >\n          <GreyTitle theme={theme}>Activity</GreyTitle>\n        </HeadRow>\n      </ActivityHeaderRow>\n      <RowContainer height=\"100%\">\n        <ComingSoonTitle>Coming Soon</ComingSoonTitle>\n      </RowContainer>\n    </StyledActivityTable>\n  );\n};\n\nexport default ActivityTable;\n","import React, { useEffect, useState } from 'react';\nimport DialogForm from './DialogForm';\nimport {\n  useWallet,\n  useWalletAddressForMint,\n} from '../../../utils/wallet';\nimport { PublicKey } from '@solana/web3.js';\nimport { useCallAsync, useSendTransaction } from '../../../utils/notifications';\nimport { swapApiRequest, useSwapApiGet } from '../../../utils/swap/api';\nimport { showSwapAddress } from '../../../utils/config';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport {\n  ConnectToMetamaskButton,\n  // getErc20Balance,\n  useEthAccount,\n  withdrawEth,\n} from '../../../utils/swap/eth';\nimport { useConnection, useIsProdNetwork } from '../../../utils/connection';\n// import Link from '@mui/material/Link';\n// import Typography from '@mui/material/Typography';\nimport { useAsyncData } from '../../../utils/fetch-loop';\n// import CircularProgress from '@mui/material/CircularProgress';\nimport {\n  TOKEN_PROGRAM_ID,\n  WRAPPED_SOL_MINT,\n} from '../../../utils/tokens/instructions';\nimport { parseTokenAccountData } from '../../../utils/tokens/data';\nimport { useTheme } from '@mui/material';\n// import { EthFeeEstimate } from '../../../components/EthFeeEstimate';\nimport {\n  RowContainer,\n  StyledCheckbox,\n  StyledLabel,\n  Title,\n  VioletButton,\n  WhiteButton,\n} from '../../commonStyles';\nimport { InputWithMax, InputWithPaste } from '../../../components/Input';\nimport AttentionComponent from '../../../components/Attention';\n// import { StyledTab, StyledTabs } from '../styles';\nimport FakeInputs from '../../../components/FakeInputs';\nimport ProgressBar from '../../CreateWallet/components/ProgressBar';\nimport { StyledTab, StyledTabs } from '../styles';\nimport { useSnackbar } from 'notistack';\nimport { stripDigitPlaces } from '../../../utils/utils';\n\nconst WUSDC_MINT = new PublicKey(\n  'BXXkv6z8ykpG1yuvUDPgh732wzVHB69RnB9YgSYh3itW',\n);\nconst USDC_MINT = new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v');\n\nconst WUSDT_MINT = new PublicKey(\n  'BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4',\n);\n\nconst USDT_MINT = new PublicKey('Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB');\n\nconst getTabs = (mint, swapCoinInfo, theme) => {\n  if (mint?.equals(WUSDC_MINT)) {\n    return [\n      <StyledTab theme={theme} label=\"SPL WUSDC\" key=\"spl\" value=\"spl\" />,\n      <StyledTab\n        theme={theme}\n        label=\"SPL USDC\"\n        key=\"wusdcToSplUsdc\"\n        value=\"wusdcToSplUsdc\"\n      />,\n      // <StyledTab label=\"ERC20 USDC\" key=\"swap\" value=\"swap\" />,\n    ];\n  } else if (mint?.equals(WUSDT_MINT)) {\n    return [\n      <StyledTab theme={theme} label=\"SPL WUSDT\" key=\"spl\" value=\"spl\" />,\n      <StyledTab\n        theme={theme}\n        label=\"SPL USDT\"\n        key=\"wusdtToSplUsdt\"\n        value=\"wusdtToSplUsdt\"\n      />,\n      // <StyledTab label=\"ERC20 USDT\" key=\"swap\" value=\"swap\" />,\n    ];\n  } else {\n    return [\n      <StyledTab\n        theme={theme}\n        label={`SPL ${swapCoinInfo.ticker}`}\n        key=\"spl\"\n        value=\"spl\"\n      />,\n      // <StyledTab\n      //   label={`${\n      //     swapCoinInfo.erc20Contract ? 'ERC20' : 'Native'\n      //   } ${swapCoinInfo.ticker}`}\n      //   key=\"swap\"\n      //   value=\"swap\"\n      // />,\n    ];\n  }\n};\n\nexport default function SendDialog({ open, onClose, publicKey, balanceInfo, refreshTokensData }) {\n  const { mint: rawMint, symbol: tokenSymbol } = balanceInfo;\n  const mint = new PublicKey(rawMint)\n\n  const isProdNetwork = useIsProdNetwork();\n  const [tab, setTab] = useState('spl');\n\n  const [swapCoinInfo] = useSwapApiGet(\n    showSwapAddress && balanceInfo.mint && isProdNetwork\n      ? `coins/sol/${mint.toBase58()}`\n      : null,\n  );\n  const ethAccount = useEthAccount();\n\n  const theme = useTheme();\n  const tokenSymbolForCheck =\n    tokenSymbol === 'wUSDT' || tokenSymbol === 'wUSDC'\n      ? tokenSymbol.replace('w', 'Wrapped ')\n      : tokenSymbol;\n\n  return (\n    <>\n      <DialogForm\n        open={open}\n        theme={theme}\n        onClose={onClose}\n        onEnter={() => {\n          setTab('spl');\n        }}\n        height={'auto'}\n        padding={'2rem 0'}\n      >\n        <>\n          <FakeInputs />\n          <RowContainer>\n            <Title fontSize=\"1.6rem\">\n              Send {tokenSymbolForCheck ? ` ${tokenSymbolForCheck} to` : null}\n            </Title>\n            {/* {ethAccount && (\n              <div>\n                <Typography color=\"textSecondary\" style={{ fontSize: '14px' }}>\n                  Metamask connected: {ethAccount}\n                </Typography>\n              </div>\n            )} */}\n          </RowContainer>\n          {mint?.equals(WUSDC_MINT) || mint?.equals(WUSDT_MINT) ? (\n            <StyledTabs\n              value={tab}\n              theme={theme}\n              variant=\"fullWidth\"\n              onChange={(e, value) => setTab(value)}\n              textColor=\"primary\"\n              indicatorColor=\"primary\"\n            >\n              {getTabs(mint, swapCoinInfo, theme)}\n            </StyledTabs>\n          ) : null}\n          {tab === 'spl' ? (\n            <SendSplDialog\n              onClose={onClose}\n              publicKey={publicKey}\n              balanceInfo={balanceInfo}\n              refreshTokensData={refreshTokensData}\n            />\n          ) : tab === 'wusdcToSplUsdc' ? (\n            <SendSwapDialog\n              key={tab}\n              ethAccount={''}\n              tab={tab}\n              onClose={onClose}\n              refreshTokensData={refreshTokensData}\n              publicKey={publicKey}\n              balanceInfo={balanceInfo}\n              swapCoinInfo={swapCoinInfo}\n              wusdcToSplUsdc\n            />\n          ) : tab === 'wusdtToSplUsdt' ? (\n            <SendSwapDialog\n              key={tab}\n              onClose={onClose}\n              ethAccount={''}\n              tab={tab}\n              publicKey={publicKey}\n              balanceInfo={balanceInfo}\n              swapCoinInfo={swapCoinInfo}\n              refreshTokensData={refreshTokensData}\n              wusdtToSplUsdt\n            />\n          ) : (\n            <SendSwapDialog\n              key={tab}\n              tab={tab}\n              onClose={onClose}\n              publicKey={publicKey}\n              balanceInfo={balanceInfo}\n              swapCoinInfo={swapCoinInfo}\n              ethAccount={ethAccount}\n              refreshTokensData={refreshTokensData}\n            />\n          )}\n        </>\n      </DialogForm>\n      {ethAccount &&\n      (swapCoinInfo?.blockchain === 'eth' || swapCoinInfo?.erc20Contract) ? (\n        <EthWithdrawalCompleter ethAccount={ethAccount} publicKey={publicKey} />\n      ) : null}\n    </>\n  );\n}\n\nfunction SendSplDialog({ onClose, publicKey, balanceInfo, refreshTokensData }) {\n  const { decimals, mint: rawMint } = balanceInfo;\n  const mint = new PublicKey(rawMint)\n\n  const defaultAddressHelperText =\n    !mint || mint.equals(WRAPPED_SOL_MINT)\n      ? 'Enter Solana Address'\n      : 'Enter SPL token or Solana address';\n\n  const wallet = useWallet();\n  const [sendTransaction, sending] = useSendTransaction();\n  const [addressHelperText, setAddressHelperText] = useState(\n    defaultAddressHelperText,\n  );\n  const [passValidation, setPassValidation] = useState<undefined | boolean>(\n    undefined,\n  );\n  const [overrideDestinationCheck, setOverrideDestinationCheck] = useState(\n    false,\n  );\n  const [shouldShowOverride, setShouldShowOverride] = useState<\n    undefined | boolean\n  >(undefined);\n  const {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    validAmount,\n  } = useForm(balanceInfo, addressHelperText, passValidation, 'spl', false);\n  \n  const mintString = mint.toString();\n\n  const theme = useTheme();\n\n  useEffect(() => {\n    (async () => {\n      if (!destinationAddress) {\n        setAddressHelperText(defaultAddressHelperText);\n        setPassValidation(undefined);\n        setShouldShowOverride(undefined);\n        return;\n      }\n      try {\n        const destinationAccountInfo = await wallet.connection.getAccountInfo(\n          new PublicKey(destinationAddress),\n        );\n        setShouldShowOverride(false);\n\n        if (destinationAccountInfo.owner.equals(TOKEN_PROGRAM_ID)) {\n          const accountInfo = parseTokenAccountData(\n            destinationAccountInfo.data,\n          );\n          if (accountInfo.mint.toBase58() === mintString) {\n            setPassValidation(true);\n            setAddressHelperText('Address is a valid SPL token address');\n          } else {\n            setPassValidation(false);\n            setAddressHelperText('Destination address mint does not match');\n          }\n        } else {\n          setPassValidation(true);\n          setAddressHelperText('Destination is a Solana address');\n        }\n      } catch (e) {\n        console.log(`Received error validating address ${e}`);\n        setAddressHelperText(defaultAddressHelperText);\n        setShouldShowOverride(true);\n        setPassValidation(undefined);\n      }\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [destinationAddress, wallet, mintString]);\n\n  async function makeTransaction() {\n    let amount = Math.round(parseFloat(transferAmountString) * 10 ** decimals);\n\n    if (!amount || amount <= 0) {\n      throw new Error('Invalid amount');\n    }\n    return wallet.transferToken(\n      publicKey,\n      new PublicKey(destinationAddress),\n      amount,\n      mint,\n      decimals,\n      null,\n      overrideDestinationCheck,\n    );\n  }\n\n  const disabled = shouldShowOverride\n    ? !overrideDestinationCheck || sending || !validAmount\n    : sending || !validAmount;\n\n  async function onSubmit() {\n    return (\n      typeof sendTransaction === 'function' &&\n      sendTransaction(makeTransaction(), {\n        onSuccess: () => {\n          refreshTokensData()\n          onClose();\n        },\n        onError: () => {},\n      })\n    );\n  }\n\n  return (\n    <>\n      <RowContainer width=\"90%\" direction=\"column\">\n        {fields}\n        {shouldShowOverride && (\n          <RowContainer\n            margin={'0 0 2rem 0'}\n            style={{\n              alignItems: 'center',\n              display: 'flex',\n              textAlign: 'left',\n            }}\n          >\n            <StyledLabel theme={theme} htmlFor={'overrideDestinationCheck'}>\n              This address has no funds. Are you sure it's correct?\n            </StyledLabel>\n            <StyledCheckbox\n              theme={theme}\n              id={'overrideDestinationCheck'}\n              checked={overrideDestinationCheck}\n              onChange={() =>\n                setOverrideDestinationCheck(!overrideDestinationCheck)\n              }\n            />\n          </RowContainer>\n        )}\n        <RowContainer justify=\"space-between\">\n          <WhiteButton\n            theme={theme}\n            onClick={onClose}\n            width=\"calc(50% - .5rem)\"\n          >\n            Cancel\n          </WhiteButton>\n          <VioletButton\n            theme={theme}\n            type=\"submit\"\n            color=\"primary\"\n            width=\"calc(50% - .5rem)\"\n            disabled={!!disabled}\n            onClick={onSubmit}\n          >\n            Send\n          </VioletButton>\n        </RowContainer>\n      </RowContainer>\n    </>\n  );\n}\n\nfunction SendSwapDialog({\n  tab,\n  onClose,\n  publicKey,\n  balanceInfo,\n  swapCoinInfo,\n  ethAccount,\n  refreshTokensData,\n  wusdcToSplUsdc = false,\n  wusdtToSplUsdt = false,\n}) {\n  const wallet = useWallet();\n  const [sendTransaction, sending] = useSendTransaction();\n  const [signature, setSignature] = useState(null);\n  const {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    setDestinationAddress,\n    validAmount,\n  } = useForm(balanceInfo, '', true, tab, swapCoinInfo?.erc20Contract);\n\n  const theme = useTheme();\n\n  const { name: tokenName, decimals, mint: rawMint } = balanceInfo;\n  const mint = new PublicKey(rawMint)\n\n  const blockchain =\n    wusdcToSplUsdc || wusdtToSplUsdt\n      ? 'sol'\n      : swapCoinInfo?.blockchain === 'sol'\n      ? 'eth'\n      : swapCoinInfo?.blockchain;\n  const needMetamask = blockchain === 'eth';\n\n  // const [ethBalance] = useAsyncData(\n  //   () => getErc20Balance(ethAccount),\n  //   'ethBalance',\n  //   {\n  //     refreshInterval: 2000,\n  //   },\n  // );\n\n  // const ethFeeData = useSwapApiGet(\n  //   blockchain === 'eth' &&\n  //     `fees/eth/${ethAccount}` +\n  //       (swapCoinInfo?.erc20Contract ? '/' + swapCoinInfo?.erc20Contract : ''),\n  //   { refreshInterval: 2000 },\n  // );\n  // const [ethFeeEstimate] = ethFeeData;\n  // const insufficientEthBalance =\n  //   typeof ethBalance === 'number' &&\n  //   typeof ethFeeEstimate === 'number' &&\n  //   ethBalance < ethFeeEstimate;\n\n  // useEffect(() => {\n  //   if (blockchain === 'eth' && ethAccount) {\n  //     setDestinationAddress(ethAccount);\n  //   }\n  // }, [blockchain, ethAccount, setDestinationAddress]);\n\n  let splUsdcWalletAddress = useWalletAddressForMint(\n    wusdcToSplUsdc ? USDC_MINT : null,\n  );\n  let splUsdtWalletAddress = useWalletAddressForMint(\n    wusdtToSplUsdt ? USDT_MINT : null,\n  );\n\n  useEffect(() => {\n    if (wusdcToSplUsdc && splUsdcWalletAddress) {\n      setDestinationAddress(splUsdcWalletAddress);\n    }\n  }, [\n    setDestinationAddress,\n    wusdcToSplUsdc,\n    splUsdcWalletAddress,\n    wusdtToSplUsdt,\n    splUsdtWalletAddress,\n  ]);\n\n  async function makeTransaction() {\n    let amount = Math.round(parseFloat(transferAmountString) * 10 ** decimals);\n    if (!amount || amount <= 0) {\n      throw new Error('Invalid amount');\n    }\n    const params: any = {\n      blockchain,\n      address: destinationAddress,\n      size: amount / 10 ** decimals,\n    };\n    if (blockchain === 'sol') {\n      params.coin = swapCoinInfo?.splMint;\n    } else if (blockchain === 'eth') {\n      params.coin = swapCoinInfo?.erc20Contract;\n    }\n    if (mint?.equals(WUSDC_MINT)) {\n      params.wusdcToUsdc = true;\n    } else if (mint?.equals(WUSDT_MINT)) {\n      params.wusdtToUsdt = true;\n    }\n    const swapInfo = await swapApiRequest('POST', 'swap_to', params);\n    if (swapInfo.blockchain !== 'sol') {\n      throw new Error('Unexpected blockchain');\n    }\n    return wallet.transferToken(\n      publicKey,\n      new PublicKey(swapInfo.address),\n      amount,\n      mint,\n      decimals,\n      swapInfo.memo,\n    );\n  }\n\n  async function onSubmit() {\n    return (\n      typeof sendTransaction === 'function' &&\n      sendTransaction(makeTransaction(), {\n        onSuccess: setSignature,\n        onError: (e) => {\n          console.log('error', e);\n        },\n      })\n    );\n  }\n\n  if (signature) {\n    return (\n      <SendSwapProgress\n        key={signature}\n        publicKey={publicKey}\n        signature={signature}\n        refreshTokensData={refreshTokensData}\n        blockchain={blockchain}\n        onClose={onClose}\n      />\n    );\n  }\n\n  let sendButton = (\n    <VioletButton\n      type=\"submit\"\n      color=\"primary\"\n      theme={theme}\n      width=\"calc(50% - .5rem)\"\n      disabled={\n        !!(\n          (sending || !validAmount)\n          // || insufficientEthBalance || (needMetamask && !ethAccount)\n        )\n      }\n      onClick={onSubmit}\n    >\n      Send\n    </VioletButton>\n  );\n\n  return (\n    <>\n      <RowContainer width=\"90%\" direction=\"column\" margin=\"2rem 0 0 0\">\n        <Title>\n          SPL {tokenName} can be converted to{' '}\n          {blockchain === 'eth' && swapCoinInfo?.erc20Contract\n            ? 'ERC20'\n            : blockchain === 'sol' && swapCoinInfo?.splMint\n            ? 'SPL'\n            : 'native'}{' '}\n          {swapCoinInfo?.ticker}\n          {needMetamask ? ' via MetaMask' : null}.\n        </Title>\n        {/* {blockchain === 'eth' && (\n          <Title>\n            Estimated withdrawal transaction fee:\n            <EthFeeEstimate\n              ethFeeData={ethFeeData}\n              insufficientEthBalance={insufficientEthBalance}\n            />\n          </Title>\n        )} */}\n        {needMetamask && !ethAccount ? <ConnectToMetamaskButton /> : fields}\n        {/* {insufficientEthBalance && (\n          <RowContainer margin=\"2rem 0 0 0\">\n            <Title color={theme.customPalette.red.main}>\n              Insufficient {swapCoinInfo?.ticker} for withdrawal transaction fee\n            </Title>\n          </RowContainer>\n        )} */}\n        <RowContainer\n          justify=\"space-between\"\n          margin={\n            !ethAccount &&\n            // || insufficientEthBalance\n            '2rem 0 0 0'\n          }\n        >\n          <WhiteButton\n            theme={theme}\n            onClick={onClose}\n            width=\"calc(50% - .5rem)\"\n          >\n            Cancel\n          </WhiteButton>\n          {sendButton}\n        </RowContainer>\n      </RowContainer>\n    </>\n  );\n}\n\nfunction SendSwapProgress({ publicKey, signature, onClose, blockchain, refreshTokensData }) {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const [showResult, setShowResult] = useState(false);\n  const [showedResult, setIsResultShowed] = useState(false);\n\n  const connection = useConnection();\n  const theme = useTheme();\n  const [swaps] = useSwapApiGet(`swaps_from/sol/${publicKey.toBase58()}`, {\n    refreshInterval: 1000,\n  });\n  const [confirms] = useAsyncData(\n    async () => {\n      const { value } = await connection.getSignatureStatus(signature);\n      return value?.confirmations;\n    },\n    [connection.getSignatureStatus, signature],\n    { refreshInterval: 2000 },\n  );\n  useEffect(() => {\n    if (showResult && !showedResult) {\n      setIsResultShowed(true);\n      enqueueSnackbar('Success!', { variant: 'success' });\n      refreshTokensData()\n      onClose();\n    }\n  }, [showResult, enqueueSnackbar, refreshTokensData, onClose, showedResult]);\n\n  let step = 1;\n  let ethTxid = null;\n  for (let swap of swaps || []) {\n    const { deposit, withdrawal } = swap;\n    if (deposit.txid === signature) {\n      if (withdrawal.txid?.startsWith('0x')) {\n        step = 3;\n        ethTxid = withdrawal.txid;\n        if (!showResult) {\n          setShowResult(true);\n        }\n      } else if (withdrawal.txid && blockchain !== 'eth') {\n        step = 3;\n        if (!showResult) {\n          setShowResult(true);\n        }\n      } else {\n        step = 2;\n      }\n    }\n  }\n\n  const stepToShow =\n    confirms && confirms > 0 // we confirms - 2 step\n      ? 2\n      : confirms === null || step === 3 // null - done, show filled 3 step\n      ? 4\n      : step; // otherwise step 1\n\n  return (\n    <>\n      <RowContainer direction=\"column\">\n        <ProgressBar\n          currentStep={stepToShow}\n          firstStepText={'Send Request'}\n          secondStepText={\n            confirms\n              ? `Wait for Confirmations (${confirms}/35)`\n              : 'Transaction Pending'\n          }\n          thirdStepText={'Withdraw Funds'}\n          style={{ padding: '7rem 0 10rem 0' }}\n        />\n        {!ethTxid && blockchain === 'eth' ? (\n          <DialogContentText style={{ marginTop: 16, marginBottom: 0 }}>\n            Please keep this window open. You will need to approve the request\n            on MetaMask to complete the transaction.\n          </DialogContentText>\n        ) : null}\n        <WhiteButton\n          theme={theme}\n          onClick={onClose}\n          style={{ display: 'flex', flexDirection: 'column' }}\n        >\n          Close Popup\n          <span style={{ fontSize: '.9rem' }}>\n            (the conversion process will not be stopped)\n          </span>\n        </WhiteButton>\n      </RowContainer>\n    </>\n  );\n}\n\nfunction useForm(\n  balanceInfo,\n  addressHelperText = '',\n  passAddressValidation = true,\n  tab = 'spl',\n  erc20Contract = true,\n) {\n  const [destinationAddress, setDestinationAddress] = useState('');\n  const [transferAmountString, setTransferAmountString] = useState('');\n  const { amount: balanceAmount, symbol: tokenSymbol } = balanceInfo;\n\n  const parsedAmount = parseFloat(transferAmountString);\n  const validAmount = parsedAmount > 0 && parsedAmount <= balanceAmount;\n  const theme = useTheme();\n  const tokenSymbolForCheck =\n    tokenSymbol === 'wUSDT' || tokenSymbol === 'wUSDC'\n      ? tokenSymbol.replace('w', 'Wrapped ')\n      : tokenSymbol;\n\n  const isConvertTab = tab === 'wusdcToSplUsdc' || tab === 'wusdtToSplUsdt';\n  let maxBalance = String(\n    stripDigitPlaces(balanceAmount, 8)\n  );\n\n  // minus fee for transfering\n  if (tokenSymbol === 'SOL') {\n    maxBalance = String(\n      stripDigitPlaces(parseFloat(String(maxBalance)) - 0.000005, 8),\n    );\n  }\n\n  const fields = (\n    <>\n      <RowContainer margin=\"2rem 0\">\n        <InputWithPaste\n          placeholder=\"Recipient Address\"\n          type=\"text\"\n          style={{ fontSize: '1.2rem' }}\n          containerStyle={{ width: '100%' }}\n          onChange={(e) => setDestinationAddress(e.target.value)}\n          value={destinationAddress}\n          onPasteClick={() =>\n            navigator.clipboard\n              .readText()\n              .then((clipText) => setDestinationAddress(clipText))\n          }\n        />\n      </RowContainer>\n\n      {!passAddressValidation && (\n        <RowContainer margin=\"0 0 2rem 0\">\n          <Title fontSize=\"1.4rem\" color={theme.customPalette.red.main}>\n            {addressHelperText}\n          </Title>\n        </RowContainer>\n      )}\n\n      <RowContainer>\n        <AttentionComponent\n          blockHeight=\"8rem\"\n          iconStyle={{ margin: '0 2rem 0 3rem' }}\n          textStyle={{\n            fontSize: '1.4rem',\n          }}\n          text={`Please make sure that you sending funds to the ${\n            isConvertTab\n              ? ` Native ${tokenSymbol.replace('w', '')}`\n              : tokenSymbolForCheck\n          } address in the ${\n            tab === 'spl' ? 'SPL' : erc20Contract ? 'ERC20' : 'Native'\n          } network.`}\n        />\n      </RowContainer>\n\n      <RowContainer margin=\"2rem 0\">\n        <InputWithMax\n          placeholder=\"Amount\"\n          type=\"text\"\n          containerStyle={{ width: '100%' }}\n          onChange={(e) => setTransferAmountString(e.target.value)}\n          value={transferAmountString}\n          onMaxClick={() => setTransferAmountString(maxBalance)}\n          maxText={`${maxBalance} ${tokenSymbol ? tokenSymbolForCheck : null}`}\n        />\n      </RowContainer>\n    </>\n  );\n\n  return {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    setDestinationAddress,\n    validAmount,\n  };\n}\n\nfunction EthWithdrawalCompleter({ ethAccount, publicKey }) {\n  const [swaps] = useSwapApiGet(`swaps_from/sol/${publicKey.toBase58()}`, {\n    refreshInterval: 10000,\n  });\n  if (!swaps) {\n    return null;\n  }\n  return swaps.map((swap) => (\n    <EthWithdrawalCompleterItem\n      key={swap.deposit.txid}\n      ethAccount={ethAccount}\n      swap={swap}\n    />\n  ));\n}\n\nfunction EthWithdrawalCompleterItem({ ethAccount, swap }) {\n  const callAsync = useCallAsync();\n  const { withdrawal } = swap;\n  useEffect(() => {\n    if (\n      withdrawal.status === 'sent' &&\n      withdrawal.blockchain === 'eth' &&\n      withdrawal.txid &&\n      !withdrawal.txid.startsWith('0x') &&\n      withdrawal.txData\n    ) {\n      withdrawEth(ethAccount, withdrawal, callAsync);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [withdrawal.txid, withdrawal.status]);\n  return null;\n}\n","import React, { useState } from 'react';\nimport DialogForm from './DialogForm';\nimport {\n  useIsProdNetwork,\n  useSolanaExplorerUrlSuffix,\n} from '../../../utils/connection';\nimport { useAsyncData } from '../../../utils/fetch-loop';\nimport { abbreviateAddress } from '../../../utils/utils';\nimport tuple from 'immutable-tuple';\nimport { useCallAsync } from '../../../utils/notifications';\nimport {\n  ConnectToMetamaskButton,\n  getErc20Balance,\n  swapErc20ToSpl,\n  useEthAccount,\n  estimateErc20SwapFees,\n} from '../../../utils/swap/eth';\nimport { showSwapAddress } from '../../../utils/config';\n\nimport Stepper from '@mui/material/Stepper';\nimport Step from '@mui/material/Step';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Link from '@mui/material/Link';\nimport { useTheme } from '@mui/material';\nimport { EthFeeEstimate } from '../../../components/EthFeeEstimate';\nimport { useBalanceInfo } from '../../../utils/wallet';\nimport { swapApiRequest } from '../../../utils/swap/api';\nimport {\n  RowContainer,\n  Title,\n  VioletButton,\n  WhiteButton,\n} from '../../commonStyles';\nimport { InputWithMax, TextareaWithCopy } from '../../../components/Input';\nimport AttentionComponent from '../../../components/Attention';\nimport {\n  // StyledTab, StyledTabs,\n  StyledStepLabel,\n} from '../styles';\n\nimport MetamaskIcon from '../../../images/metamask.png';\nimport FakeInputs from '../../../components/FakeInputs';\n\nexport default function DepositDialog({\n  open,\n  onClose,\n  publicKey,\n  isAssociatedToken,\n}) {\n  const balanceInfo = useBalanceInfo(publicKey) || {\n    amount: 0,\n    decimals: 8,\n    mint: null,\n    tokenName: 'Loading...',\n    tokenSymbol: '--',\n    owner: null,\n  };\n  const isProdNetwork = useIsProdNetwork();\n  const [swapInfo] = useAsyncData(async () => {\n    if (!showSwapAddress || !isProdNetwork) {\n      return null;\n    }\n    return await swapApiRequest(\n      'POST',\n      'swap_to',\n      {\n        blockchain: 'sol',\n        coin: balanceInfo.mint?.toBase58(),\n        address: publicKey?.toBase58(),\n      },\n      { ignoreUserErrors: true },\n    );\n  }, [\n    'swapInfo',\n    isProdNetwork,\n    balanceInfo.mint?.toBase58(),\n    publicKey?.toBase58(),\n  ]);\n\n  const ethAccount = useEthAccount();\n  const urlSuffix = useSolanaExplorerUrlSuffix();\n  const { mint, tokenSymbol, owner } = balanceInfo;\n  const [tab, setTab] = useState(0);\n  const theme = useTheme();\n  const tokenSymbolForCheck =\n    (tokenSymbol ?? abbreviateAddress(mint)) === 'wUSDT' ||\n    (tokenSymbol ?? abbreviateAddress(mint)) === 'wUSDC'\n      ? (tokenSymbol ?? abbreviateAddress(mint)).replace('w', 'Wrapped ')\n      : tokenSymbol ?? abbreviateAddress(mint);\n\n  const displaySolAddress = ((owner && publicKey.equals(owner)) || isAssociatedToken);\n  const depositAddressStr = displaySolAddress\n    ? owner?.toBase58()\n    : publicKey.toBase58();\n\n  let firstTab;\n  // let secondTab;\n\n  if (swapInfo) {\n    firstTab = `Deposit SPL ${tokenSymbolForCheck}`;\n    // secondTab = !mint\n    //   ? `Convert ${swapInfo.coin.ticker} to SOL`\n    //   : swapInfo.coin.ticker;\n    if (!mint) {\n      firstTab = 'Deposit SOL';\n    } else {\n      // secondTab = ` Convert ${\n      //   swapInfo.coin.erc20Contract ? 'ERC20' : 'Native'\n      // } ${secondTab} to SOL`;\n    }\n  } else {\n    firstTab = `Deposit SPL ${tokenSymbolForCheck}`;\n  }\n\n  return (\n    <DialogForm\n      open={open}\n      onClose={onClose}\n      height={'auto'}\n      padding={'2rem 0'}\n      onEnter={() => {\n        setTab(0);\n      }}\n    >\n      <FakeInputs />\n\n      {/* <RowContainer padding=\"1.6rem 0 2.4rem 0\">\n        <StyledTabs\n          theme={theme}\n          value={tab}\n          variant=\"fullWidth\"\n          onChange={(e, value) => setTab(value)}\n        >\n          <StyledTab theme={theme} label={firstTab} />\n          {swapInfo && <StyledTab theme={theme} label={secondTab} />}\n        </StyledTabs>\n      </RowContainer> */}\n\n      <RowContainer padding=\"1.6rem 0 2.4rem 0\">\n        <Title fontSize=\"1.6rem\">{firstTab}</Title>\n      </RowContainer>\n\n      <RowContainer direction=\"column\" padding=\"0\">\n        {tab === 0 ? (\n          <>\n            <RowContainer width=\"90%\">\n              {/* TODO: add qr code */}\n              {/* <CopyableDisplay\n              value={publicKey?.toBase58()}\n              label={'Deposit Address'}\n              autoFocus\n              qrCode\n            /> */}\n              <TextareaWithCopy value={depositAddressStr} height={'5rem'} />\n            </RowContainer>\n            <RowContainer\n              width=\"90%\"\n              justify=\"flex-start\"\n              padding=\"1rem 0 0 1.6rem\"\n            >\n              <Link\n                href={\n                  `https://explorer.solana.com/account/${depositAddressStr}` +\n                  urlSuffix\n                }\n                target=\"_blank\"\n                rel=\"noopener\"\n                style={{\n                  color: theme.customPalette.blue.serum,\n                  fontSize: '1rem',\n                  fontFamily: 'Avenir Next Demi',\n                }}\n              >\n                View on Solana Explorer\n              </Link>\n            </RowContainer>\n            <RowContainer width=\"90%\" padding=\"2rem 0\">\n              <AttentionComponent\n                text={\n                  !displaySolAddress && isAssociatedToken === false\n                    ? `This address can only be used to receive ${\n                        tokenSymbol ?? abbreviateAddress(mint)\n                      }. Do not send other tokens to this address.`\n                    : `This address can be used to receive ${\n                        tokenSymbol ?? abbreviateAddress(mint)\n                      }.`\n                }\n                blockHeight={'8rem'}\n                iconStyle={{ margin: '0 2rem 0 3rem' }}\n                textStyle={{\n                  fontSize: '1.4rem',\n                }}\n              />\n            </RowContainer>\n          </>\n        ) : (\n          <SolletSwapDepositAddress\n            balanceInfo={balanceInfo}\n            swapInfo={swapInfo}\n            ethAccount={ethAccount}\n            onClose={onClose}\n            publicKey={publicKey}\n          />\n        )}\n      </RowContainer>\n      {tab === 0 && (\n        <RowContainer margin=\"2rem 0 0 0\">\n          <WhiteButton theme={theme} width={'calc(50%)'} onClick={onClose}>\n            Close\n          </WhiteButton>\n        </RowContainer>\n      )}\n    </DialogForm>\n  );\n}\n\nfunction SolletSwapDepositAddress({\n  balanceInfo,\n  swapInfo,\n  ethAccount,\n  onClose,\n  publicKey,\n}) {\n  const theme = useTheme();\n  const [ethBalance] = useAsyncData(\n    () => getErc20Balance(ethAccount),\n    'ethBalance',\n    {\n      refreshInterval: 2000,\n    },\n  );\n\n  const ethFeeData = useAsyncData(\n    swapInfo?.coin &&\n      (() =>\n        estimateErc20SwapFees({\n          erc20Address: swapInfo.coin.erc20Contract,\n          swapAddress: swapInfo.address,\n          ethAccount,\n        })),\n    'depositEthFee',\n    {\n      refreshInterval: 2000,\n    },\n  );\n\n  if (!swapInfo) {\n    return null;\n  }\n\n  const ethFeeEstimate = Array.isArray(ethFeeData[0])\n    ? ethFeeData[0].reduce((acc, elem) => acc + elem)\n    : ethFeeData[0];\n  const insufficientEthBalance =\n    typeof ethBalance === 'number' &&\n    typeof ethFeeEstimate === 'number' &&\n    ethBalance < ethFeeEstimate;\n\n  const { blockchain, address, memo, coin } = swapInfo;\n  const { mint, tokenName, owner, tokenSymbol } = balanceInfo;\n\n  if (blockchain === 'btc' && memo === null) {\n    return (\n      <RowContainer direction=\"column\" width=\"90%\">\n        <Title style={{ marginBottom: '2rem' }}>\n          Native BTC can be converted to SPL {tokenName} by sending it to the\n          following address:\n        </Title>\n        <TextareaWithCopy\n          value={address}\n          height=\"5rem\"\n          // qrCode={`bitcoin:${address}`}\n        />\n        <RowContainer padding=\"2rem 0\">\n          <AttentionComponent\n            text={\n              !!owner && publicKey?.equals(owner)\n                ? 'This address can only be used to receive SOL. Do not send other tokens to this address.'\n                : `This address can only be used to receive ${\n                    tokenSymbol ?? abbreviateAddress(mint)\n                  }. Do not send SOL to this address.`\n            }\n            blockHeight={'8rem'}\n            iconStyle={{ margin: '0 2rem 0 3rem' }}\n            textStyle={{\n              fontSize: '1.4rem',\n            }}\n          />\n        </RowContainer>\n        <RowContainer margin=\"2rem 0 0 0\">\n          <WhiteButton theme={theme} width={'calc(50%)'} onClick={onClose}>\n            Close\n          </WhiteButton>\n        </RowContainer>\n      </RowContainer>\n    );\n  }\n\n  if (blockchain === 'eth') {\n    return (\n      <RowContainer width=\"90%\" direction=\"column\">\n        <Title fontSize=\"1.4rem\" fontFamily=\"Avenir Next Demi\">\n          {coin.erc20Contract ? 'ERC20' : 'Native'} {coin.ticker} can be\n          converted to {mint ? 'SPL' : 'native'} {tokenName} via MetaMask.\n        </Title>\n        {!ethAccount && (\n          <Title\n            fontSize=\"1.4rem\"\n            fontFamily=\"Avenir Next Demi\"\n            style={{ padding: '1rem 0' }}\n          >\n            To convert, you must already have SOL in your wallet\n          </Title>\n        )}\n        <RowContainer>\n          <Title fontSize=\"1.4rem\" fontFamily=\"Avenir Next Demi\">\n            Estimated withdrawal transaction fee: {'  '}\n            <EthFeeEstimate\n              ethFeeData={ethFeeData}\n              insufficientEthBalance={insufficientEthBalance}\n            />\n          </Title>\n        </RowContainer>\n        {!ethAccount && (\n          <RowContainer margin=\"2rem 0\">\n            <img src={MetamaskIcon} alt=\"metamask\" />\n          </RowContainer>\n        )}\n        <MetamaskDeposit\n          swapInfo={swapInfo}\n          onClose={onClose}\n          insufficientEthBalance={insufficientEthBalance}\n        />\n      </RowContainer>\n    );\n  }\n\n  return null;\n}\n\nfunction MetamaskDeposit({ swapInfo, insufficientEthBalance, onClose }) {\n  const ethAccount = useEthAccount();\n  const [amount, setAmount] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [status, setStatus] = useState<{\n    step: number;\n    confirms: number;\n    txid: string;\n  }>({ step: 0, confirms: 0, txid: '' });\n  const callAsync = useCallAsync();\n  const theme = useTheme();\n\n  const {\n    address: swapAddress,\n    memo: destination,\n    coin: { erc20Contract: erc20Address },\n  } = swapInfo;\n\n  const [maxAmount] = useAsyncData(async () => {\n    if (ethAccount) {\n      return Math.min(\n        await getErc20Balance(ethAccount, erc20Address),\n        swapInfo.maxSize ?? Infinity,\n      );\n    }\n    return 0;\n  }, tuple(getErc20Balance, ethAccount, erc20Address));\n\n  if (!ethAccount) {\n    return <ConnectToMetamaskButton />;\n  }\n\n  async function submit() {\n    setSubmitted(true);\n    setStatus({ step: 0, confirms: 0, txid: '' });\n    await callAsync(\n      (async () => {\n        let parsedAmount = parseFloat(amount);\n\n        if (\n          !parsedAmount ||\n          parsedAmount > Number(maxAmount) ||\n          parsedAmount <= 0\n        ) {\n          throw new Error('Invalid amount');\n        }\n        await swapErc20ToSpl({\n          ethAccount,\n          erc20Address,\n          swapAddress,\n          destination,\n          amount,\n          onStatusChange: (e) => setStatus((status) => ({ ...status, ...e })),\n        });\n      })(),\n      { onError: () => setSubmitted(false), onSuccess: () => {} },\n    );\n  }\n\n  if (!submitted) {\n    let convertButton = (\n      <VioletButton\n        theme={theme}\n        width={'calc(50% - .5rem)'}\n        onClick={submit}\n        disabled={insufficientEthBalance}\n      >\n        Convert\n      </VioletButton>\n    );\n\n    // if (insufficientEthBalance) {\n    //   convertButton = (\n    //     <Tooltip\n    //       title=\"Insufficient ETH for withdrawal transaction fee\"\n    //       placement=\"top\"\n    //     >\n    //       <span>{convertButton}</span>\n    //     </Tooltip>\n    //   );\n    // }\n\n    return (\n      <>\n        <RowContainer margin=\"1rem 0\">\n          {ethAccount && (\n            <>\n              <Title color={theme.customPalette.grey.dark} fontSize=\"1.2rem\">\n                <span style={{ fontFamily: 'Avenir Next Demi' }}>\n                  Metamask connected:\n                </span>{' '}\n                {ethAccount}\n              </Title>\n            </>\n          )}\n        </RowContainer>\n        <RowContainer width=\"90%\" padding=\"2rem 0\">\n          <AttentionComponent\n            text={`To convert ${swapInfo?.coin?.ticker} to SOL , your  SOL balance shouldn’t be empty.`}\n            blockHeight={'6rem'}\n            iconStyle={{ margin: '0 2rem 0 3rem', height: '2.5rem' }}\n            textStyle={{\n              fontSize: '1.4rem',\n            }}\n          />\n        </RowContainer>\n        <InputWithMax\n          value={amount}\n          maxText={`${Number(maxAmount).toFixed(6)} ${swapInfo?.coin?.ticker}`}\n          onChange={(e) => setAmount(e.target.value.trim())}\n          onMaxClick={() => setAmount(Number(maxAmount).toFixed(6))}\n          placeholder={'Amount'}\n          type={'text'}\n        />\n        {insufficientEthBalance && (\n          <RowContainer width=\"90%\" margin=\"2rem 0 0 0\">\n            <Title color={theme.customPalette.red.main}>\n              Insufficient {swapInfo?.coin?.ticker} for withdrawal transaction\n              fee\n            </Title>\n          </RowContainer>\n        )}\n        <RowContainer justify=\"space-between\" width=\"90%\" margin=\"2rem 0 0 0\">\n          <WhiteButton\n            theme={theme}\n            onClick={onClose}\n            width=\"calc(50% - .5rem)\"\n          >\n            Close\n          </WhiteButton>\n          {convertButton}\n        </RowContainer>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Stepper\n        activeStep={status.step}\n        style={{\n          marginTop: '2rem',\n          display: 'flex',\n          flexDirection: 'column',\n          fontSize: '1.4rem',\n          alignItems: 'flex-start',\n        }}\n      >\n        <Step style={{ margin: '1rem 0', fontSize: '1.4rem' }}>\n          <StyledStepLabel>Approve Conversion</StyledStepLabel>\n        </Step>\n        <Step style={{ margin: '1rem 0' }}>\n          <StyledStepLabel>Send Funds</StyledStepLabel>\n        </Step>\n        <Step style={{ margin: '1rem 0' }}>\n          <StyledStepLabel>Wait for Confirmations</StyledStepLabel>\n        </Step>\n      </Stepper>\n      {status.step === 2 ? (\n        <>\n          <RowContainer margin=\"2rem 0 0 0\">\n            <div style={{ marginRight: 16 }}>\n              <CircularProgress />\n            </div>\n            <div>\n              {status.confirms ? (\n                <Title>{status.confirms} / 12 Confirmations</Title>\n              ) : (\n                <Title>Transaction Pending</Title>\n              )}\n              <Title style={{ marginLeft: '2rem' }}>\n                <Link\n                  href={`https://etherscan.io/tx/${status.txid}`}\n                  target=\"_blank\"\n                  rel=\"noopener\"\n                >\n                  View on Etherscan\n                </Link>\n              </Title>\n            </div>\n          </RowContainer>\n        </>\n      ) : null}\n    </>\n  );\n}\n","import React, { useState, useRef, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  TextField,\n  IconButton,\n  Typography,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Chip,\n  CircularProgress,\n  Card,\n  CardContent,\n} from '@mui/material';\nimport { Send, Settings, SmartToy, Clear } from '@mui/icons-material';\nimport { styled } from '@mui/material/styles';\n\nconst ChatContainer = styled(Paper)(({ theme }) => ({\n  height: '600px',\n  display: 'flex',\n  flexDirection: 'column',\n  borderRadius: 16,\n  background: theme.palette.mode === 'dark' \n    ? 'rgba(26, 27, 30, 0.8)' \n    : 'rgba(255, 255, 255, 0.9)',\n  backdropFilter: 'blur(10px)',\n  border: `1px solid ${theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.08)'}`,\n}));\n\nconst MessagesContainer = styled(Box)(({ theme }) => ({\n  flex: 1,\n  overflowY: 'auto',\n  padding: theme.spacing(2),\n  display: 'flex',\n  flexDirection: 'column',\n  gap: theme.spacing(1),\n  '&::-webkit-scrollbar': {\n    width: '4px',\n  },\n  '&::-webkit-scrollbar-track': {\n    background: 'transparent',\n  },\n  '&::-webkit-scrollbar-thumb': {\n    background: 'rgba(255, 255, 255, 0.2)',\n    borderRadius: '2px',\n  },\n}));\n\nconst MessageBubble = styled(Card)<{ isUser: boolean }>(({ theme, isUser }) => ({\n  maxWidth: '70%',\n  alignSelf: isUser ? 'flex-end' : 'flex-start',\n  borderRadius: isUser ? '16px 16px 4px 16px' : '16px 16px 16px 4px',\n  background: isUser \n    ? 'linear-gradient(135deg, #651CE4 0%, #8B4CF7 100%)'\n    : theme.palette.mode === 'dark'\n      ? 'rgba(255, 255, 255, 0.05)'\n      : 'rgba(0, 0, 0, 0.03)',\n  color: isUser ? '#fff' : theme.palette.text.primary,\n  animation: 'slide-up 0.3s ease-out',\n  transition: 'transform 0.2s ease',\n  '&:hover': {\n    transform: 'scale(1.02)',\n  },\n}));\n\nconst InputContainer = styled(Box)(({ theme }) => ({\n  padding: theme.spacing(2),\n  borderTop: `1px solid ${theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.08)'}`,\n}));\n\nconst ProviderChip = styled(Chip)(({ theme }) => ({\n  borderRadius: 12,\n  transition: 'all 0.2s ease',\n  '&:hover': {\n    transform: 'scale(1.05)',\n  },\n}));\n\ninterface Message {\n  id: string;\n  content: string;\n  isUser: boolean;\n  timestamp: Date;\n  provider?: string;\n}\n\ninterface Provider {\n  id: string;\n  name: string;\n  baseUrl: string;\n  models: string[];\n  requiresAuth: boolean;\n}\n\nconst AI_PROVIDERS: Provider[] = [\n  {\n    id: 'openai',\n    name: 'OpenAI',\n    baseUrl: 'https://api.openai.com/v1',\n    models: ['gpt-4', 'gpt-3.5-turbo'],\n    requiresAuth: true,\n  },\n  {\n    id: 'anthropic',\n    name: 'Anthropic',\n    baseUrl: 'https://api.anthropic.com/v1',\n    models: ['claude-3-opus', 'claude-3-sonnet', 'claude-3-haiku'],\n    requiresAuth: true,\n  },\n  {\n    id: 'openrouter',\n    name: 'OpenRouter',\n    baseUrl: 'https://openrouter.ai/api/v1',\n    models: ['mistralai/mistral-7b-instruct', 'anthropic/claude-3-opus'],\n    requiresAuth: true,\n  },\n  {\n    id: 'local',\n    name: 'Local Model',\n    baseUrl: 'http://localhost:1234/v1',\n    models: ['local-model'],\n    requiresAuth: false,\n  },\n];\n\nconst ChatInterface: React.FC = () => {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [input, setInput] = useState('');\n  const [selectedProvider, setSelectedProvider] = useState<string>('openai');\n  const [selectedModel, setSelectedModel] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [apiKey, setApiKey] = useState('');\n  const [showSettings, setShowSettings] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const currentProvider = AI_PROVIDERS.find(p => p.id === selectedProvider);\n\n  useEffect(() => {\n    if (currentProvider && currentProvider.models.length > 0) {\n      setSelectedModel(currentProvider.models[0]);\n    }\n  }, [selectedProvider, currentProvider]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  const sendMessage = async () => {\n    if (!input.trim() || isLoading) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      content: input,\n      isUser: true,\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsLoading(true);\n\n    try {\n      const response = await callAI(input);\n      const aiMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        content: response,\n        isUser: false,\n        timestamp: new Date(),\n        provider: currentProvider?.name,\n      };\n      setMessages(prev => [...prev, aiMessage]);\n    } catch (error) {\n      const errorMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        content: `Error: ${error instanceof Error ? error.message : 'Failed to get response'}`,\n        isUser: false,\n        timestamp: new Date(),\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const callAI = async (message: string): Promise<string> => {\n    if (!currentProvider) throw new Error('No provider selected');\n\n    // Mock implementation for demo purposes\n    // In a real implementation, you would make actual API calls\n    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 1000));\n    \n    const mockResponses = [\n      \"I'm a mock AI assistant. In a real implementation, I would connect to the selected AI provider.\",\n      \"This is a demonstration of the chat interface. The actual AI integration would handle your request.\",\n      \"SVMSeek Chat UI is working! This would be replaced with real AI responses.\",\n      \"Your message has been received. In production, this would query the selected AI model.\",\n    ];\n    \n    return mockResponses[Math.floor(Math.random() * mockResponses.length)];\n  };\n\n  const clearChat = () => {\n    setMessages([]);\n  };\n\n  return (\n    <ChatContainer className=\"glass-morphism scale-in\">\n      <Box sx={{ p: 2, borderBottom: 1, borderColor: 'divider' }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h6\" component=\"h2\" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <SmartToy />\n            SVMSeek AI Chat\n          </Typography>\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <IconButton onClick={() => setShowSettings(!showSettings)} size=\"small\">\n              <Settings />\n            </IconButton>\n            <IconButton onClick={clearChat} size=\"small\">\n              <Clear />\n            </IconButton>\n          </Box>\n        </Box>\n\n        {showSettings && (\n          <Box sx={{ display: 'flex', gap: 2, mb: 2 }} className=\"fade-in\">\n            <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n              <InputLabel>Provider</InputLabel>\n              <Select\n                value={selectedProvider}\n                label=\"Provider\"\n                onChange={(e) => setSelectedProvider(e.target.value)}\n              >\n                {AI_PROVIDERS.map((provider) => (\n                  <MenuItem key={provider.id} value={provider.id}>\n                    {provider.name}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n\n            {currentProvider && (\n              <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n                <InputLabel>Model</InputLabel>\n                <Select\n                  value={selectedModel}\n                  label=\"Model\"\n                  onChange={(e) => setSelectedModel(e.target.value)}\n                >\n                  {currentProvider.models.map((model) => (\n                    <MenuItem key={model} value={model}>\n                      {model}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            )}\n\n            {currentProvider?.requiresAuth && (\n              <TextField\n                size=\"small\"\n                label=\"API Key\"\n                type=\"password\"\n                value={apiKey}\n                onChange={(e) => setApiKey(e.target.value)}\n                sx={{ minWidth: 200 }}\n              />\n            )}\n          </Box>\n        )}\n\n        <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\n          <ProviderChip\n            icon={<SmartToy />}\n            label={currentProvider?.name || 'No Provider'}\n            size=\"small\"\n            variant=\"outlined\"\n          />\n          {selectedModel && (\n            <ProviderChip\n              label={selectedModel}\n              size=\"small\"\n              color=\"primary\"\n            />\n          )}\n        </Box>\n      </Box>\n\n      <MessagesContainer>\n        {messages.length === 0 && (\n          <Box sx={{ textAlign: 'center', mt: 4 }} className=\"fade-in\">\n            <SmartToy sx={{ fontSize: 48, opacity: 0.5, mb: 2 }} />\n            <Typography variant=\"body1\" color=\"text.secondary\">\n              Start a conversation with AI\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n              Select a provider and model to begin\n            </Typography>\n          </Box>\n        )}\n\n        {messages.map((message) => (\n          <MessageBubble\n            key={message.id}\n            isUser={message.isUser}\n            elevation={0}\n          >\n            <CardContent sx={{ p: 2, '&:last-child': { pb: 2 } }}>\n              <Typography variant=\"body2\">\n                {message.content}\n              </Typography>\n              {message.provider && (\n                <Typography variant=\"caption\" sx={{ opacity: 0.7, mt: 1, display: 'block' }}>\n                  via {message.provider}\n                </Typography>\n              )}\n            </CardContent>\n          </MessageBubble>\n        ))}\n\n        {isLoading && (\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mt: 2 }} className=\"slide-up\">\n            <CircularProgress size={20} />\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {currentProvider?.name} is thinking...\n            </Typography>\n          </Box>\n        )}\n\n        <div ref={messagesEndRef} />\n      </MessagesContainer>\n\n      <InputContainer>\n        <Box sx={{ display: 'flex', gap: 1 }}>\n          <TextField\n            fullWidth\n            multiline\n            maxRows={3}\n            placeholder=\"Type your message...\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            onKeyPress={(e) => {\n              if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                sendMessage();\n              }\n            }}\n            variant=\"outlined\"\n            size=\"small\"\n            sx={{\n              '& .MuiOutlinedInput-root': {\n                borderRadius: 3,\n                transition: 'all 0.2s ease',\n                '&:hover': {\n                  transform: 'scale(1.01)',\n                },\n              },\n            }}\n          />\n          <IconButton\n            onClick={sendMessage}\n            disabled={!input.trim() || isLoading}\n            color=\"primary\"\n            sx={{\n              borderRadius: 3,\n              transition: 'all 0.2s ease',\n              '&:hover': {\n                transform: 'scale(1.1)',\n              },\n            }}\n          >\n            <Send />\n          </IconButton>\n        </Box>\n      </InputContainer>\n    </ChatContainer>\n  );\n};\n\nexport default ChatInterface;","import { getTokensData } from \"../utils/ccai\";\nimport { sleep } from \"../utils/utils\";\n\nexport class TokensDataSingleton {\n  public static isDataLoading = false\n  private static tokensDataMap = new Map();\n\n  public static async getData() {\n    if (this.isDataLoading) {\n      // add trials\n      await sleep(1000)\n      return this.getData()\n    }\n\n    if (this.tokensDataMap.size === 0) {\n        return await this.requestData()\n    }\n\n    return this.tokensDataMap;\n  }\n\n  private static async requestData() {\n      this.isDataLoading = true\n      await getTokensData().then((data) => {\n        console.log('set to false', data)\n        this.isDataLoading = false\n        this.tokensDataMap = data\n      });\n      return this.tokensDataMap;\n  }\n}","export const getTokensData = async () => {\n  const getDexTokensPrices = `\n  query getDexTokensPrices {\n      getDexTokensPrices {\n        symbol\n        price\n      }\n    }\n  `;\n\n  return await fetch('https://api.cryptocurrencies.ai/graphql', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      operationName: 'getDexTokensPrices',\n      query: getDexTokensPrices,\n    }),\n  })\n    .then((data) => data.json())\n    .then((data) => {\n      const map = new Map();\n\n      if (data && data.data && data.data.getDexTokensPrices) {\n        data.data.getDexTokensPrices.forEach((tokenData) => {\n          map.set(tokenData.symbol, tokenData.price);\n        });\n      }\n\n      return map;\n    });\n};","import React from 'react';\nimport DialogForm from './DialogForm';\nimport { DialogContentText, useTheme } from '@mui/material';\nimport {\n  RedFilledButton,\n  RowContainer,\n  Title,\n  WhiteButton,\n} from '../../commonStyles';\nimport { abbreviateAddress } from '../../../utils/utils';\nimport { useSendTransaction } from '../../../utils/notifications';\nimport { refreshWalletPublicKeys, useWallet } from '../../../utils/wallet';\n\nexport default function CloseTokenAccountDialog({\n  open,\n  onClose,\n  publicKey,\n  balanceInfo,\n  refreshTokensData,\n}) {\n  const wallet = useWallet();\n  const [sendTransaction, sending] = useSendTransaction();\n  const theme = useTheme();\n\n  const { mint, symbol } = balanceInfo || { mint: '', symbol: '' };\n\n  function onSubmit() {\n    sendTransaction(wallet.closeTokenAccount(publicKey), {\n      onSuccess: () => {\n        refreshWalletPublicKeys(wallet);\n        refreshTokensData();\n        onClose();\n      },\n    });\n  }\n\n  return (\n    <DialogForm\n      open={open}\n      onClose={onClose}\n      fullWidth\n      height=\"auto\"\n      padding=\"2rem 0\"\n      onSubmit={onSubmit}\n    >\n      <RowContainer width=\"90%\" direction=\"column\">\n        <RowContainer justify=\"flex-start\" margin=\"0 0 2rem 0\">\n          <Title fontSize=\"2.4rem\">\n            Delete {symbol ?? mint} Address {abbreviateAddress(publicKey)}\n          </Title>\n        </RowContainer>\n        <RowContainer>\n          <DialogContentText>\n            Are you sure you want to delete your {symbol ?? mint} address{' '}\n            {publicKey.toBase58()}? This will permanently disable token\n            transfers to this address and remove it from your wallet.\n          </DialogContentText>\n        </RowContainer>\n        <RowContainer margin=\"2rem 0 0 0\" justify=\"space-between\">\n          <WhiteButton\n            theme={theme}\n            width={'calc(50% - .5rem)'}\n            onClick={onClose}\n          >\n            Close\n          </WhiteButton>\n          <RedFilledButton\n            theme={theme}\n            onClick={onSubmit}\n            width={'calc(50% - .5rem)'}\n            disabled={sending}\n          >\n            Delete\n          </RedFilledButton>\n        </RowContainer>\n      </RowContainer>\n    </DialogForm>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Redirect } from 'react-router-dom';\n\nimport AccountInfo from './components/AccountInfo';\nimport AssetsTable from './components/AssetsTable';\nimport ActivityTable from './components/ActivityTable';\nimport SendDialog from './components/SendPopup';\nimport ReceiveDialog from './components/ReceivePopup';\nimport AddTokenDialog from './components/AddTokenPopup';\nimport ChatInterface from '../../components/ChatInterface';\n\nimport { RowContainer } from '../commonStyles';\nimport { PublicKey } from '@solana/web3.js';\nimport { useWallet } from '../../utils/wallet';\nimport { getAllTokensData, TokenInfo, useInterval } from '../../utils/utils';\nimport { TokensDataSingleton } from '../../components/TokensDataSingleton';\nimport { useConnection } from '../../utils/connection';\nimport { useTokenInfosMap } from '../../utils/tokens/names';\nimport CloseTokenAccountDialog from './components/CloseTokenAccountPopup';\n\nconst MainWalletContainer = styled(RowContainer)`\n  flex-direction: column;\n  height: 100%;\n  padding: 0 3rem 3rem 3rem;\n  @media (max-width: 540px) {\n    padding: 0;\n  }\n`;\n\nconst Switcher = styled.button`\n  display: none;\n\n  @media (max-width: 540px) {\n    outline: none;\n    display: block;\n    width: 33.33%;\n    color: ${(props) => (props.isTabActive ? ' #f5f5fb' : '#96999C')};\n    background: none;\n    font-family: 'Avenir Next Demi';\n    height: 4rem;\n    cursor: pointer;\n    border: none;\n    border-bottom: ${(props) =>\n      props.isTabActive ? '0.2rem solid #f5f5fb' : '0.2rem solid #96999C'};\n  }\n`;\n\nconst SwitcherRow = styled(RowContainer)`\n  display: none;\n\n  @media (max-width: 540px) {\n    display: flex;\n    width: 100%;\n    justify-content: space-between;\n    align-items: center;\n  }\n`;\n\nconst TableContainer = styled(RowContainer)`\n  max-height: 80%;\n  height: 100%;\n  justify-content: space-between;\n\n  @media (max-width: 540px) {\n    height: 60%;\n    flex-direction: column;\n  }\n`;\n\nconst Wallet = () => {\n  const wallet = useWallet();\n  const [selectedTokenData, selectToken] = useState<{\n    publicKey: PublicKey;\n    isAssociatedToken: boolean;\n  }>({\n    publicKey: wallet.publicKey,\n    isAssociatedToken: false,\n  });\n  const [sendDialogOpen, setSendDialogOpen] = useState(false);\n  const [depositDialogOpen, setDepositDialogOpen] = useState(false);\n  const [\n    closeTokenAccountDialogOpen,\n    setCloseTokenAccountDialogOpen,\n  ] = useState(false);\n\n  const hash = sessionStorage.getItem('hash');\n  const [showAddTokenDialog, setShowAddTokenDialog] = useState(\n    hash === '#add_token_to_rebalance',\n  );\n  const [activeTab, setTabActive] = useState('assets');\n\n  const connection = useConnection();\n  const tokenInfosMap = useTokenInfosMap();\n  const [refreshCounter, changeRefreshCounter] = useState(0);\n  const [tokensData, setTokensData] = useState<Map<string, number>>(new Map());\n  const [allTokensData, setAllTokensData] = useState<Map<string, TokenInfo>>(\n    new Map(),\n  );\n\n  const walletPubkey = wallet?.publicKey?.toString();\n  const refreshTokensData = () => changeRefreshCounter(refreshCounter + 1);\n  const isTokenSelected =\n    allTokensData.get(selectedTokenData.publicKey.toString()) &&\n    selectedTokenData.publicKey;\n\n  useInterval(refreshTokensData, 5 * 1000);\n\n  useEffect(() => {\n    const getData = async () => {\n      const data = await TokensDataSingleton.getData();\n      const allTokensInfo = await getAllTokensData(\n        new PublicKey(walletPubkey),\n        connection,\n        tokenInfosMap,\n      );\n\n      setTokensData(data);\n      setAllTokensData(allTokensInfo);\n    };\n\n    getData();\n    // eslint-disable-next-line\n  }, [\n    connection,\n    walletPubkey,\n    // eslint-disable-next-line\n    JSON.stringify([...tokenInfosMap.entries()]),\n    refreshCounter,\n  ]);\n\n  return (\n    <MainWalletContainer>\n      {window.opener && <Redirect to={'/connect_popup'} />}\n      <AccountInfo tokensData={tokensData} allTokensData={allTokensData} />\n      <TableContainer>\n        <SwitcherRow>\n          <Switcher\n            isTabActive={activeTab === 'assets'}\n            onClick={() => {\n              setTabActive('assets');\n            }}\n          >\n            Assets\n          </Switcher>\n          <Switcher\n            isTabActive={activeTab === 'activity'}\n            onClick={() => {\n              setTabActive('activity');\n            }}\n          >\n            Activity\n          </Switcher>\n          <Switcher\n            isTabActive={activeTab === 'chat'}\n            onClick={() => {\n              setTabActive('chat');\n            }}\n          >\n            AI Chat\n          </Switcher>\n        </SwitcherRow>\n\n        <AssetsTable\n          isActive={activeTab === 'assets'}\n          tokensData={tokensData}\n          allTokensData={allTokensData}\n          refreshTokensData={refreshTokensData}\n          selectToken={selectToken}\n          setSendDialogOpen={setSendDialogOpen}\n          setDepositDialogOpen={setDepositDialogOpen}\n          setShowAddTokenDialog={setShowAddTokenDialog}\n          setCloseTokenAccountDialogOpen={setCloseTokenAccountDialogOpen}\n        />\n\n        <ActivityTable isActive={activeTab === 'activity'} />\n        \n        {activeTab === 'chat' && (\n          <div style={{ height: '100%', padding: '2rem 0' }} className=\"fade-in\">\n            <ChatInterface />\n          </div>\n        )}\n      </TableContainer>\n      {isTokenSelected && (\n        <SendDialog\n          open={sendDialogOpen}\n          balanceInfo={allTokensData.get(\n            selectedTokenData.publicKey.toString(),\n          )}\n          refreshTokensData={refreshTokensData}\n          onClose={() => setSendDialogOpen(false)}\n          publicKey={selectedTokenData.publicKey}\n        />\n      )}\n      {isTokenSelected && (\n        <ReceiveDialog\n          open={depositDialogOpen}\n          onClose={() => setDepositDialogOpen(false)}\n          isAssociatedToken={selectedTokenData.isAssociatedToken}\n          publicKey={selectedTokenData.publicKey}\n        />\n      )}\n\n      <AddTokenDialog\n        open={showAddTokenDialog}\n        allTokensData={allTokensData}\n        balanceInfo={allTokensData.get(wallet.publicKey.toString())}\n        refreshTokensData={refreshTokensData}\n        onClose={() => setShowAddTokenDialog(false)}\n      />\n      {/* <TokenInfoDialog\n        open={tokenInfoDialogOpen}\n        onClose={() => setTokenInfoDialogOpen(false)}\n        publicKey={selectedPublicKey}\n      /> */}\n      {isTokenSelected && (\n        <CloseTokenAccountDialog\n          open={closeTokenAccountDialogOpen}\n          onClose={() => setCloseTokenAccountDialogOpen(false)}\n          publicKey={selectedTokenData.publicKey}\n          refreshTokensData={refreshTokensData}\n          balanceInfo={allTokensData.get(\n            selectedTokenData.publicKey.toString(),\n          )}\n        />\n      )}\n    </MainWalletContainer>\n  );\n};\n\nexport default Wallet;\n","import * as React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport Wallet from '../pages/Wallet';\nimport { useWallet } from '../utils/wallet';\nimport { useHasLockedMnemonicAndSeed } from '../utils/wallet-seed';\n\nexport default function LoginRoutes({ match, location }) {\n  const wallet = useWallet();\n  const [hasLockedMnemonicAndSeed] = useHasLockedMnemonicAndSeed();\n\n  return (\n    <Switch>\n      {!wallet ? (\n        hasLockedMnemonicAndSeed ? (\n          <Redirect to=\"/welcome_back\" />\n        ) : (\n          <Redirect to=\"/welcome\" />\n        )\n      ) : null}\n      <Route path={match.url} component={Wallet} />\n    </Switch>\n  );\n}\n"],"names":["WhiteText","styled","Title","GreenText","props","theme","customPalette","green","light","feeFormat","Intl","NumberFormat","undefined","minimumFractionDigits","maximumFractionDigits","AddTokenDialog","_ref","open","onClose","allTokensData","balanceInfo","refreshTokensData","wallet","useWallet","tokenAccountCost","useAsyncData","updateTokenName","useUpdateTokenName","sendTransaction","sending","useSendTransaction","popularTokens","usePopularTokens","tab","setTab","useState","searchValue","setSearchValue","mintAddress","setMintAddress","tokenName","setTokenName","tokenSymbol","setTokenSymbol","erc20Address","setErc20Address","selectedTokens","setSelectedTokens","useTheme","amount","decimals","valid","onSubmit","params","Promise","all","map","tokenInfo","addToken","then","onSuccess","length","startsWith","useEffect","cost","stripDigitPlaces","format","LAMPORTS_PER_SOL","isBalanceLowerCost","isDisabled","handleKeyDown","event","key","async","_ref2","swapApiRequest","splMint","name","ticker","blockchain","mint","PublicKey","createAssociatedTokenAccount","_jsxs","DialogForm","height","padding","onEnter","children","_jsx","FakeInputs","RowContainer","margin","StyledTabs","value","onChange","e","StyledTab","label","direction","LoadingIndicator","width","justify","InputWithSearch","type","target","match","onSearchClick","placeholder","ListCard","filter","_tokenInfo$name","deprecated","abbreviateAddress","address","toLowerCase","includes","symbol","TokenListItem","existingAccount","values","find","tokenData","disabled","_Fragment","InputWithPaste","trim","autoFocus","onPasteClick","navigator","clipboard","readText","clipText","Link","href","rel","onKeyDown","Input","color","red","main","style","formatNumberToUSFormat","WhiteButton","onClick","VioletButton","_ref3","logoUri","alreadyExists","selectedTokenIndex","findIndex","token","checked","borderBottom","border","new","cursor","minHeight","slice","Row","TokenIcon","tokenLogoUri","size","marginLeft","StyledCheckbox","DialogContent","Dialog","Tabs","blue","serum","Tab","StyledStepLabel","StepLabel","div","ProgressBarContainer","Percent","ProgressBar","currentStep","Step","isCompleted","isSelected","Steps","StepContainer","AlignedTitle","ProgressBarRow","firstStepText","secondStepText","thirdStepText","id","tokensData","totalUSD","reduce","acc","cur","isTokenUSDT","isUSDToken","tokenPrice","get","MobilePublicKeyTitle","DesktopPublicKeyTitle","AccountInfoContainer","AccountInfoSubContainer","AccountInfoFirstContainer","Instruction","showOnMobile","Balances","BalanceCard","needLeftMargin","GlassContainer","background","InstructionTitle","InstructionsBlock","align","fontFamily","fontSize","whiteSpace","ExclamationMark","AccountInfo","_ref4","enqueueSnackbar","useSnackbar","useBalanceInfo","publicKey","toBase58","AccountsSelector","grey","copy","variant","maxFont","TotalBalance","Math","pow","React","prev","next","JSON","stringify","StyledActivityTable","TableContainer","isActive","ActivityHeaderRow","ComingSoonTitle","HeadRow","GreyTitle","WUSDC_MINT","USDC_MINT","WUSDT_MINT","USDT_MINT","getTabs","swapCoinInfo","equals","SendDialog","rawMint","isProdNetwork","useIsProdNetwork","useSwapApiGet","showSwapAddress","ethAccount","useEthAccount","tokenSymbolForCheck","replace","textColor","indicatorColor","SendSplDialog","SendSwapDialog","wusdcToSplUsdc","wusdtToSplUsdt","erc20Contract","EthWithdrawalCompleter","defaultAddressHelperText","WRAPPED_SOL_MINT","addressHelperText","setAddressHelperText","passValidation","setPassValidation","overrideDestinationCheck","setOverrideDestinationCheck","shouldShowOverride","setShouldShowOverride","fields","destinationAddress","transferAmountString","validAmount","useForm","mintString","toString","destinationAccountInfo","connection","getAccountInfo","owner","TOKEN_PROGRAM_ID","parseTokenAccountData","data","console","log","alignItems","display","textAlign","StyledLabel","htmlFor","round","parseFloat","Error","transferToken","makeTransaction","onError","signature","setSignature","setDestinationAddress","needMetamask","splUsdcWalletAddress","useWalletAddressForMint","splUsdtWalletAddress","SendSwapProgress","sendButton","coin","wusdcToUsdc","wusdtToUsdt","swapInfo","memo","ConnectToMetamaskButton","showResult","setShowResult","showedResult","setIsResultShowed","useConnection","swaps","refreshInterval","confirms","getSignatureStatus","confirmations","step","ethTxid","swap","deposit","withdrawal","_withdrawal$txid","txid","stepToShow","DialogContentText","marginTop","marginBottom","flexDirection","arguments","passAddressValidation","setTransferAmountString","balanceAmount","parsedAmount","isConvertTab","maxBalance","String","containerStyle","AttentionComponent","blockHeight","iconStyle","textStyle","text","InputWithMax","onMaxClick","maxText","_ref5","EthWithdrawalCompleterItem","_ref6","callAsync","useCallAsync","status","txData","withdrawEth","DepositDialog","_balanceInfo$mint2","isAssociatedToken","_balanceInfo$mint","ignoreUserErrors","urlSuffix","useSolanaExplorerUrlSuffix","displaySolAddress","depositAddressStr","firstTab","TextareaWithCopy","SolletSwapDepositAddress","ethBalance","getErc20Balance","ethFeeData","estimateErc20SwapFees","swapAddress","ethFeeEstimate","Array","isArray","elem","insufficientEthBalance","EthFeeEstimate","src","alt","MetamaskDeposit","setAmount","submitted","setSubmitted","setStatus","destination","maxAmount","_swapInfo$maxSize","min","maxSize","Infinity","tuple","_swapInfo$coin","_swapInfo$coin2","_swapInfo$coin3","convertButton","Number","swapErc20ToSpl","onStatusChange","dark","toFixed","Stepper","activeStep","marginRight","CircularProgress","ChatContainer","Paper","borderRadius","palette","mode","backdropFilter","MessagesContainer","Box","flex","overflowY","spacing","gap","MessageBubble","Card","isUser","maxWidth","alignSelf","primary","animation","transition","transform","InputContainer","borderTop","ProviderChip","Chip","AI_PROVIDERS","baseUrl","models","requiresAuth","ChatInterface","messages","setMessages","input","setInput","selectedProvider","setSelectedProvider","selectedModel","setSelectedModel","isLoading","setIsLoading","apiKey","setApiKey","showSettings","setShowSettings","messagesEndRef","useRef","currentProvider","p","_messagesEndRef$curre","current","scrollIntoView","behavior","sendMessage","userMessage","Date","now","content","timestamp","response","callAI","aiMessage","provider","error","errorMessage","message","resolve","setTimeout","random","mockResponses","floor","className","sx","borderColor","justifyContent","mb","Typography","component","SmartToy","IconButton","Settings","clearChat","Clear","FormControl","minWidth","InputLabel","Select","MenuItem","model","TextField","flexWrap","icon","mt","opacity","elevation","CardContent","pb","ref","fullWidth","multiline","maxRows","onKeyPress","shiftKey","preventDefault","Send","TokensDataSingleton","getData","this","isDataLoading","sleep","tokensDataMap","requestData","fetch","method","headers","body","operationName","query","json","Map","getDexTokensPrices","forEach","set","price","getTokensData","CloseTokenAccountDialog","closeTokenAccount","refreshWalletPublicKeys","RedFilledButton","MainWalletContainer","Switcher","button","isTabActive","SwitcherRow","Wallet","_wallet$publicKey","selectedTokenData","selectToken","sendDialogOpen","setSendDialogOpen","depositDialogOpen","setDepositDialogOpen","closeTokenAccountDialogOpen","setCloseTokenAccountDialogOpen","hash","sessionStorage","getItem","showAddTokenDialog","setShowAddTokenDialog","activeTab","setTabActive","tokenInfosMap","useTokenInfosMap","refreshCounter","changeRefreshCounter","setTokensData","setAllTokensData","walletPubkey","isTokenSelected","useInterval","allTokensInfo","getAllTokensData","entries","window","opener","Redirect","to","AssetsTable","ActivityTable","ReceiveDialog","LoginRoutes","location","hasLockedMnemonicAndSeed","useHasLockedMnemonicAndSeed","Switch","Route","path","url"],"sourceRoot":""}