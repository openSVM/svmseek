{"version":3,"file":"static/js/674.7dde72c2.chunk.js","mappings":"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","sources":["../node_modules/bip39/src/_wordlists.js","../node_modules/bip39/node_modules/@noble/hashes/src/hmac.ts","../node_modules/bip39/node_modules/@noble/hashes/src/pbkdf2.ts","../node_modules/bip39/node_modules/@noble/hashes/src/crypto.ts","../node_modules/bip39/node_modules/@noble/hashes/src/sha512.ts","../node_modules/bip39/node_modules/@noble/hashes/src/_u64.ts","../node_modules/bip39/node_modules/@noble/hashes/src/sha2.ts","../node_modules/bip39/src/index.js","../node_modules/bip39/node_modules/@noble/hashes/src/utils.ts","../node_modules/bip39/node_modules/@noble/hashes/src/sha256.ts","../node_modules/bip39/node_modules/@noble/hashes/src/_md.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// browserify by default only pulls in files that are hard coded in requires\n// In order of last to first in this file, the default wordlist will be chosen\n// based on what is present. (Bundles may remove wordlists they don't need)\nconst wordlists = {};\nexports.wordlists = wordlists;\nlet _default;\nexports._default = _default;\ntry {\n    exports._default = _default = require('./wordlists/czech.json');\n    wordlists.czech = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/chinese_simplified.json');\n    wordlists.chinese_simplified = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/chinese_traditional.json');\n    wordlists.chinese_traditional = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/korean.json');\n    wordlists.korean = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/french.json');\n    wordlists.french = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/italian.json');\n    wordlists.italian = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/spanish.json');\n    wordlists.spanish = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/japanese.json');\n    wordlists.japanese = _default;\n    wordlists.JA = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/portuguese.json');\n    wordlists.portuguese = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/english.json');\n    wordlists.english = _default;\n    wordlists.EN = _default;\n}\ncatch (err) { }\n","/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash, clean, Hash, toBytes, type CHash, type Input } from './utils.ts';\n\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    ahash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    clean(pad);\n  }\n  update(buf: Input): this {\n    aexists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    abytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest(): Uint8Array {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  clone(): HMAC<T> {\n    return this._cloneInto();\n  }\n  destroy(): void {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac: {\n  (hash: CHash, key: Input, message: Input): Uint8Array;\n  create(hash: CHash, key: Input): HMAC<any>;\n} = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/**\n * PBKDF (RFC 2898). Can be used to create a key from password and salt.\n * @module\n */\nimport { hmac } from './hmac.ts';\n// prettier-ignore\nimport {\n  ahash, anumber,\n  asyncLoop, checkOpts, clean, createView, Hash, kdfInputToBytes,\n  type CHash,\n  type KDFInput\n} from './utils.ts';\n\nexport type Pbkdf2Opt = {\n  c: number; // Iterations\n  dkLen?: number; // Desired key length in bytes (Intended output length in octets of the derived key\n  asyncTick?: number; // Maximum time in ms for which async function can block execution\n};\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash: CHash, _password: KDFInput, _salt: KDFInput, _opts: Pbkdf2Opt) {\n  ahash(hash);\n  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);\n  const { c, dkLen, asyncTick } = opts;\n  anumber(c);\n  anumber(dkLen);\n  anumber(asyncTick);\n  if (c < 1) throw new Error('iterations (c) should be >= 1');\n  const password = kdfInputToBytes(_password);\n  const salt = kdfInputToBytes(_salt);\n  // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n  const DK = new Uint8Array(dkLen);\n  // U1 = PRF(Password, Salt + INT_32_BE(i))\n  const PRF = hmac.create(hash, password);\n  const PRFSalt = PRF._cloneInto().update(salt);\n  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\n\nfunction pbkdf2Output<T extends Hash<T>>(\n  PRF: Hash<T>,\n  PRFSalt: Hash<T>,\n  DK: Uint8Array,\n  prfW: Hash<T>,\n  u: Uint8Array\n) {\n  PRF.destroy();\n  PRFSalt.destroy();\n  if (prfW) prfW.destroy();\n  clean(u);\n  return DK;\n}\n\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n * @example\n * const key = pbkdf2(sha256, 'password', 'salt', { dkLen: 32, c: Math.pow(2, 18) });\n */\nexport function pbkdf2(\n  hash: CHash,\n  password: KDFInput,\n  salt: KDFInput,\n  opts: Pbkdf2Opt\n): Uint8Array {\n  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    for (let ui = 1; ui < c; ui++) {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    }\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function. Async version.\n * @example\n * await pbkdf2Async(sha256, 'password', 'salt', { dkLen: 32, c: 500_000 });\n */\nexport async function pbkdf2Async(\n  hash: CHash,\n  password: KDFInput,\n  salt: KDFInput,\n  opts: Pbkdf2Opt\n): Promise<Uint8Array> {\n  const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    await asyncLoop(c - 1, asyncTick, () => {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    });\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n","/**\n * Internal webcrypto alias.\n * We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n * See utils.ts for details.\n * @module\n */\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto: any =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n","/**\n * SHA2-512 a.k.a. sha512 and sha384. It is slower than sha256 in js because u64 operations are slow.\n *\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [the paper on truncated SHA512/256](https://eprint.iacr.org/2010/548.pdf).\n * @module\n * @deprecated\n */\nimport {\n  SHA384 as SHA384n,\n  sha384 as sha384n,\n  sha512_224 as sha512_224n,\n  SHA512_224 as SHA512_224n,\n  sha512_256 as sha512_256n,\n  SHA512_256 as SHA512_256n,\n  SHA512 as SHA512n,\n  sha512 as sha512n,\n} from './sha2.ts';\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512: typeof SHA512n = SHA512n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512: typeof sha512n = sha512n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA384: typeof SHA384n = SHA384n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha384: typeof sha384n = sha384n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512_224: typeof SHA512_224n = SHA512_224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512_224: typeof sha512_224n = sha512_224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512_256: typeof SHA512_256n = SHA512_256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512_256: typeof sha512_256n = sha512_256n;\n","/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n\nfunction fromBig(\n  n: bigint,\n  le = false\n): {\n  h: number;\n  l: number;\n} {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nfunction split(lst: bigint[], le = false): Uint32Array[] {\n  const len = lst.length;\n  let Ah = new Uint32Array(len);\n  let Al = new Uint32Array(len);\n  for (let i = 0; i < len; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nconst toBig = (h: number, l: number): bigint => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, _l: number, s: number): number => h >>> s;\nconst shrSL = (h: number, l: number, s: number): number => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number): number => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number): number => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number): number => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number): number => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h: number, l: number): number => l;\nconst rotr32L = (h: number, _l: number): number => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number): number => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number): number => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number): number => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number): number => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(\n  Ah: number,\n  Al: number,\n  Bh: number,\n  Bl: number\n): {\n  h: number;\n  l: number;\n} {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number): number => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number): number =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number): number =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number): number =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number): number =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number): number =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nexport {\n  add, add3H, add3L, add4H, add4L, add5H, add5L, fromBig, rotlBH, rotlBL, rotlSH, rotlSL, rotr32H, rotr32L, rotrBH, rotrBL, rotrSH, rotrSL, shrSH, shrSL, split, toBig\n};\n// prettier-ignore\nconst u64: { fromBig: typeof fromBig; split: typeof split; toBig: (h: number, l: number) => bigint; shrSH: (h: number, _l: number, s: number) => number; shrSL: (h: number, l: number, s: number) => number; rotrSH: (h: number, l: number, s: number) => number; rotrSL: (h: number, l: number, s: number) => number; rotrBH: (h: number, l: number, s: number) => number; rotrBL: (h: number, l: number, s: number) => number; rotr32H: (_h: number, l: number) => number; rotr32L: (h: number, _l: number) => number; rotlSH: (h: number, l: number, s: number) => number; rotlSL: (h: number, l: number, s: number) => number; rotlBH: (h: number, l: number, s: number) => number; rotlBL: (h: number, l: number, s: number) => number; add: typeof add; add3L: (Al: number, Bl: number, Cl: number) => number; add3H: (low: number, Ah: number, Bh: number, Ch: number) => number; add4L: (Al: number, Bl: number, Cl: number, Dl: number) => number; add4H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number) => number; add5H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) => number; add5L: (Al: number, Bl: number, Cl: number, Dl: number, El: number) => number; } = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","/**\n * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.\n * SHA256 is the fastest hash implementable in JS, even faster than Blake3.\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj, SHA224_IV, SHA256_IV, SHA384_IV, SHA512_IV } from './_md.ts';\nimport * as u64 from './_u64.ts';\nimport { type CHash, clean, createHasher, rotr } from './utils.ts';\n\n/**\n * Round constants:\n * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)\n */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ Uint32Array.from([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n/** Reusable temporary buffer. \"W\" comes straight from spec. */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  protected A: number = SHA256_IV[0] | 0;\n  protected B: number = SHA256_IV[1] | 0;\n  protected C: number = SHA256_IV[2] | 0;\n  protected D: number = SHA256_IV[3] | 0;\n  protected E: number = SHA256_IV[4] | 0;\n  protected F: number = SHA256_IV[5] | 0;\n  protected G: number = SHA256_IV[6] | 0;\n  protected H: number = SHA256_IV[7] | 0;\n\n  constructor(outputLen: number = 32) {\n    super(64, outputLen, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean(): void {\n    clean(SHA256_W);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    clean(this.buffer);\n  }\n}\n\nexport class SHA224 extends SHA256 {\n  protected A: number = SHA224_IV[0] | 0;\n  protected B: number = SHA224_IV[1] | 0;\n  protected C: number = SHA224_IV[2] | 0;\n  protected D: number = SHA224_IV[3] | 0;\n  protected E: number = SHA224_IV[4] | 0;\n  protected F: number = SHA224_IV[5] | 0;\n  protected G: number = SHA224_IV[6] | 0;\n  protected H: number = SHA224_IV[7] | 0;\n  constructor() {\n    super(28);\n  }\n}\n\n// SHA2-512 is slower than sha256 in js because u64 operations are slow.\n\n// Round contants\n// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409\n// prettier-ignore\nconst K512 = /* @__PURE__ */ (() => u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\nconst SHA512_Kh = /* @__PURE__ */ (() => K512[0])();\nconst SHA512_Kl = /* @__PURE__ */ (() => K512[1])();\n\n// Reusable temporary buffers\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\n\nexport class SHA512 extends HashMD<SHA512> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  // h -- high 32 bits, l -- low 32 bits\n  protected Ah: number = SHA512_IV[0] | 0;\n  protected Al: number = SHA512_IV[1] | 0;\n  protected Bh: number = SHA512_IV[2] | 0;\n  protected Bl: number = SHA512_IV[3] | 0;\n  protected Ch: number = SHA512_IV[4] | 0;\n  protected Cl: number = SHA512_IV[5] | 0;\n  protected Dh: number = SHA512_IV[6] | 0;\n  protected Dl: number = SHA512_IV[7] | 0;\n  protected Eh: number = SHA512_IV[8] | 0;\n  protected El: number = SHA512_IV[9] | 0;\n  protected Fh: number = SHA512_IV[10] | 0;\n  protected Fl: number = SHA512_IV[11] | 0;\n  protected Gh: number = SHA512_IV[12] | 0;\n  protected Gl: number = SHA512_IV[13] | 0;\n  protected Hh: number = SHA512_IV[14] | 0;\n  protected Hl: number = SHA512_IV[15] | 0;\n\n  constructor(outputLen: number = 64) {\n    super(128, outputLen, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ): void {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean(): void {\n    clean(SHA512_W_H, SHA512_W_L);\n  }\n  destroy(): void {\n    clean(this.buffer);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nexport class SHA384 extends SHA512 {\n  protected Ah: number = SHA384_IV[0] | 0;\n  protected Al: number = SHA384_IV[1] | 0;\n  protected Bh: number = SHA384_IV[2] | 0;\n  protected Bl: number = SHA384_IV[3] | 0;\n  protected Ch: number = SHA384_IV[4] | 0;\n  protected Cl: number = SHA384_IV[5] | 0;\n  protected Dh: number = SHA384_IV[6] | 0;\n  protected Dl: number = SHA384_IV[7] | 0;\n  protected Eh: number = SHA384_IV[8] | 0;\n  protected El: number = SHA384_IV[9] | 0;\n  protected Fh: number = SHA384_IV[10] | 0;\n  protected Fl: number = SHA384_IV[11] | 0;\n  protected Gh: number = SHA384_IV[12] | 0;\n  protected Gl: number = SHA384_IV[13] | 0;\n  protected Hh: number = SHA384_IV[14] | 0;\n  protected Hl: number = SHA384_IV[15] | 0;\n\n  constructor() {\n    super(48);\n  }\n}\n\n/**\n * Truncated SHA512/256 and SHA512/224.\n * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as \"intermediary\" IV of SHA512/t.\n * Then t hashes string to produce result IV.\n * See `test/misc/sha2-gen-iv.js`.\n */\n\n/** SHA512/224 IV */\nconst T224_IV = /* @__PURE__ */ Uint32Array.from([\n  0x8c3d37c8, 0x19544da2, 0x73e19966, 0x89dcd4d6, 0x1dfab7ae, 0x32ff9c82, 0x679dd514, 0x582f9fcf,\n  0x0f6d2b69, 0x7bd44da8, 0x77e36f73, 0x04c48942, 0x3f9d85a8, 0x6a1d36c8, 0x1112e6ad, 0x91d692a1,\n]);\n\n/** SHA512/256 IV */\nconst T256_IV = /* @__PURE__ */ Uint32Array.from([\n  0x22312194, 0xfc2bf72c, 0x9f555fa3, 0xc84c64c2, 0x2393b86b, 0x6f53b151, 0x96387719, 0x5940eabd,\n  0x96283ee2, 0xa88effe3, 0xbe5e1e25, 0x53863992, 0x2b0199fc, 0x2c85b8aa, 0x0eb72ddc, 0x81c52ca2,\n]);\n\nexport class SHA512_224 extends SHA512 {\n  protected Ah: number = T224_IV[0] | 0;\n  protected Al: number = T224_IV[1] | 0;\n  protected Bh: number = T224_IV[2] | 0;\n  protected Bl: number = T224_IV[3] | 0;\n  protected Ch: number = T224_IV[4] | 0;\n  protected Cl: number = T224_IV[5] | 0;\n  protected Dh: number = T224_IV[6] | 0;\n  protected Dl: number = T224_IV[7] | 0;\n  protected Eh: number = T224_IV[8] | 0;\n  protected El: number = T224_IV[9] | 0;\n  protected Fh: number = T224_IV[10] | 0;\n  protected Fl: number = T224_IV[11] | 0;\n  protected Gh: number = T224_IV[12] | 0;\n  protected Gl: number = T224_IV[13] | 0;\n  protected Hh: number = T224_IV[14] | 0;\n  protected Hl: number = T224_IV[15] | 0;\n\n  constructor() {\n    super(28);\n  }\n}\n\nexport class SHA512_256 extends SHA512 {\n  protected Ah: number = T256_IV[0] | 0;\n  protected Al: number = T256_IV[1] | 0;\n  protected Bh: number = T256_IV[2] | 0;\n  protected Bl: number = T256_IV[3] | 0;\n  protected Ch: number = T256_IV[4] | 0;\n  protected Cl: number = T256_IV[5] | 0;\n  protected Dh: number = T256_IV[6] | 0;\n  protected Dl: number = T256_IV[7] | 0;\n  protected Eh: number = T256_IV[8] | 0;\n  protected El: number = T256_IV[9] | 0;\n  protected Fh: number = T256_IV[10] | 0;\n  protected Fl: number = T256_IV[11] | 0;\n  protected Gh: number = T256_IV[12] | 0;\n  protected Gl: number = T256_IV[13] | 0;\n  protected Hh: number = T256_IV[14] | 0;\n  protected Hl: number = T256_IV[15] | 0;\n\n  constructor() {\n    super(32);\n  }\n}\n\n/**\n * SHA2-256 hash function from RFC 4634.\n *\n * It is the fastest JS hash, even faster than Blake3.\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n */\nexport const sha256: CHash = /* @__PURE__ */ createHasher(() => new SHA256());\n/** SHA2-224 hash function from RFC 4634 */\nexport const sha224: CHash = /* @__PURE__ */ createHasher(() => new SHA224());\n\n/** SHA2-512 hash function from RFC 4634. */\nexport const sha512: CHash = /* @__PURE__ */ createHasher(() => new SHA512());\n/** SHA2-384 hash function from RFC 4634. */\nexport const sha384: CHash = /* @__PURE__ */ createHasher(() => new SHA384());\n\n/**\n * SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_256: CHash = /* @__PURE__ */ createHasher(() => new SHA512_256());\n/**\n * SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_224: CHash = /* @__PURE__ */ createHasher(() => new SHA512_224());\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst sha512_1 = require(\"@noble/hashes/sha512\");\nconst pbkdf2_1 = require(\"@noble/hashes/pbkdf2\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst _wordlists_1 = require(\"./_wordlists\");\nlet DEFAULT_WORDLIST = _wordlists_1._default;\nconst INVALID_MNEMONIC = 'Invalid mnemonic';\nconst INVALID_ENTROPY = 'Invalid entropy';\nconst INVALID_CHECKSUM = 'Invalid mnemonic checksum';\nconst WORDLIST_REQUIRED = 'A wordlist is required but a default could not be found.\\n' +\n    'Please pass a 2048 word array explicitly.';\nfunction normalize(str) {\n    return (str || '').normalize('NFKD');\n}\nfunction lpad(str, padString, length) {\n    while (str.length < length) {\n        str = padString + str;\n    }\n    return str;\n}\nfunction binaryToByte(bin) {\n    return parseInt(bin, 2);\n}\nfunction bytesToBinary(bytes) {\n    return bytes.map((x) => lpad(x.toString(2), '0', 8)).join('');\n}\nfunction deriveChecksumBits(entropyBuffer) {\n    const ENT = entropyBuffer.length * 8;\n    const CS = ENT / 32;\n    const hash = sha256_1.sha256(Uint8Array.from(entropyBuffer));\n    return bytesToBinary(Array.from(hash)).slice(0, CS);\n}\nfunction salt(password) {\n    return 'mnemonic' + (password || '');\n}\nfunction mnemonicToSeedSync(mnemonic, password) {\n    const mnemonicBuffer = Uint8Array.from(Buffer.from(normalize(mnemonic), 'utf8'));\n    const saltBuffer = Uint8Array.from(Buffer.from(salt(normalize(password)), 'utf8'));\n    const res = pbkdf2_1.pbkdf2(sha512_1.sha512, mnemonicBuffer, saltBuffer, {\n        c: 2048,\n        dkLen: 64,\n    });\n    return Buffer.from(res);\n}\nexports.mnemonicToSeedSync = mnemonicToSeedSync;\nfunction mnemonicToSeed(mnemonic, password) {\n    const mnemonicBuffer = Uint8Array.from(Buffer.from(normalize(mnemonic), 'utf8'));\n    const saltBuffer = Uint8Array.from(Buffer.from(salt(normalize(password)), 'utf8'));\n    return pbkdf2_1.pbkdf2Async(sha512_1.sha512, mnemonicBuffer, saltBuffer, {\n        c: 2048,\n        dkLen: 64,\n    }).then((res) => Buffer.from(res));\n}\nexports.mnemonicToSeed = mnemonicToSeed;\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    if (!wordlist) {\n        throw new Error(WORDLIST_REQUIRED);\n    }\n    const words = normalize(mnemonic).split(' ');\n    if (words.length % 3 !== 0) {\n        throw new Error(INVALID_MNEMONIC);\n    }\n    // convert word indices to 11 bit binary strings\n    const bits = words\n        .map((word) => {\n        const index = wordlist.indexOf(word);\n        if (index === -1) {\n            throw new Error(INVALID_MNEMONIC);\n        }\n        return lpad(index.toString(2), '0', 11);\n    })\n        .join('');\n    // split the binary string into ENT/CS\n    const dividerIndex = Math.floor(bits.length / 33) * 32;\n    const entropyBits = bits.slice(0, dividerIndex);\n    const checksumBits = bits.slice(dividerIndex);\n    // calculate the checksum and compare\n    const entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);\n    if (entropyBytes.length < 16) {\n        throw new Error(INVALID_ENTROPY);\n    }\n    if (entropyBytes.length > 32) {\n        throw new Error(INVALID_ENTROPY);\n    }\n    if (entropyBytes.length % 4 !== 0) {\n        throw new Error(INVALID_ENTROPY);\n    }\n    const entropy = Buffer.from(entropyBytes);\n    const newChecksum = deriveChecksumBits(entropy);\n    if (newChecksum !== checksumBits) {\n        throw new Error(INVALID_CHECKSUM);\n    }\n    return entropy.toString('hex');\n}\nexports.mnemonicToEntropy = mnemonicToEntropy;\nfunction entropyToMnemonic(entropy, wordlist) {\n    if (!Buffer.isBuffer(entropy)) {\n        entropy = Buffer.from(entropy, 'hex');\n    }\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    if (!wordlist) {\n        throw new Error(WORDLIST_REQUIRED);\n    }\n    // 128 <= ENT <= 256\n    if (entropy.length < 16) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    if (entropy.length > 32) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    if (entropy.length % 4 !== 0) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    const entropyBits = bytesToBinary(Array.from(entropy));\n    const checksumBits = deriveChecksumBits(entropy);\n    const bits = entropyBits + checksumBits;\n    const chunks = bits.match(/(.{1,11})/g);\n    const words = chunks.map((binary) => {\n        const index = binaryToByte(binary);\n        return wordlist[index];\n    });\n    return wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093' // Japanese wordlist\n        ? words.join('\\u3000')\n        : words.join(' ');\n}\nexports.entropyToMnemonic = entropyToMnemonic;\nfunction generateMnemonic(strength, rng, wordlist) {\n    strength = strength || 128;\n    if (strength % 32 !== 0) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    rng = rng || ((size) => Buffer.from(utils_1.randomBytes(size)));\n    return entropyToMnemonic(rng(strength / 8), wordlist);\n}\nexports.generateMnemonic = generateMnemonic;\nfunction validateMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nexports.validateMnemonic = validateMnemonic;\nfunction setDefaultWordlist(language) {\n    const result = _wordlists_1.wordlists[language];\n    if (result) {\n        DEFAULT_WORDLIST = result;\n    }\n    else {\n        throw new Error('Could not find wordlist for language \"' + language + '\"');\n    }\n}\nexports.setDefaultWordlist = setDefaultWordlist;\nfunction getDefaultWordlist() {\n    if (!DEFAULT_WORDLIST) {\n        throw new Error('No Default Wordlist set');\n    }\n    return Object.keys(_wordlists_1.wordlists).filter((lang) => {\n        if (lang === 'JA' || lang === 'EN') {\n            return false;\n        }\n        return _wordlists_1.wordlists[lang].every((word, index) => word === DEFAULT_WORDLIST[index]);\n    })[0];\n}\nexports.getDefaultWordlist = getDefaultWordlist;\nvar _wordlists_2 = require(\"./_wordlists\");\nexports.wordlists = _wordlists_2.wordlists;\n","/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\nexport function isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\n/** Asserts something is positive integer. */\nexport function anumber(n: number): void {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\n}\n\n/** Asserts something is Uint8Array. */\nexport function abytes(b: Uint8Array | undefined, ...lengths: number[]): void {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n\n/** Asserts something is hash */\nexport function ahash(h: IHash): void {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.createHasher');\n  anumber(h.outputLen);\n  anumber(h.blockLen);\n}\n\n/** Asserts a hash instance has not been destroyed / finished */\nexport function aexists(instance: any, checkFinished = true): void {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\n\n/** Asserts output is properly-sized byte array */\nexport function aoutput(out: any, instance: any): void {\n  abytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error('digestInto() expects output buffer of length at least ' + min);\n  }\n}\n\n/** Generic type encompassing 8/16/32-byte arrays - but not 64-byte. */\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n/** Cast u8 / u16 / u32 to u8. */\nexport function u8(arr: TypedArray): Uint8Array {\n  return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** Cast u8 / u16 / u32 to u32. */\nexport function u32(arr: TypedArray): Uint32Array {\n  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\nexport function clean(...arrays: TypedArray[]): void {\n  for (let i = 0; i < arrays.length; i++) {\n    arrays[i].fill(0);\n  }\n}\n\n/** Create DataView of an array for easy byte-level manipulation. */\nexport function createView(arr: TypedArray): DataView {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word: number, shift: number): number {\n  return (word << (32 - shift)) | (word >>> shift);\n}\n\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word: number, shift: number): number {\n  return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE: boolean = /* @__PURE__ */ (() =>\n  new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n\n/** The byte swap operation for uint32 */\nexport function byteSwap(word: number): number {\n  return (\n    ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff)\n  );\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const swap8IfBE: (n: number) => number = isLE\n  ? (n: number) => n\n  : (n: number) => byteSwap(n);\n\n/** @deprecated */\nexport const byteSwapIfBE: typeof swap8IfBE = swap8IfBE;\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr: Uint32Array): Uint32Array {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n  return arr;\n}\n\nexport const swap32IfBE: (u: Uint32Array) => Uint32Array = isLE\n  ? (u: Uint32Array) => u\n  : byteSwap32;\n\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin: boolean = /* @__PURE__ */ (() =>\n  // @ts-ignore\n  typeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // @ts-ignore\n  if (hasHexBuiltin) return bytes.toHex();\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\nfunction asciiToBase16(ch: number): number | undefined {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // @ts-ignore\n  if (hasHexBuiltin) return Uint8Array.fromHex(hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async (): Promise<void> => {};\n\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(\n  iters: number,\n  tick: number,\n  cb: (i: number) => void\n): Promise<void> {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols, but ts doesn't see them: https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // Uint8Array.from([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error('string expected');\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\nexport function bytesToUtf8(bytes: Uint8Array): string {\n  return new TextDecoder().decode(bytes);\n}\n\n/** Accepted input of hash functions. Strings are converted to byte arrays. */\nexport type Input = string | Uint8Array;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/** KDFs can accept string or Uint8Array for user convenience. */\nexport type KDFInput = string | Uint8Array;\n/**\n * Helper for KDFs: consumes uint8array or string.\n * When string is passed, does utf8 decoding, using TextDecoder.\n */\nexport function kdfInputToBytes(data: KDFInput): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/** Copies several Uint8Arrays into one. */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n    throw new Error('options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\n/** Hash interface. */\nexport type IHash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\n\n/** For runtime check if class implements interface */\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  abstract clone(): T;\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\n/** Hash function */\nexport type CHash = ReturnType<typeof createHasher>;\n/** Hash function with output */\nexport type CHashO = ReturnType<typeof createOptHasher>;\n/** XOF with output */\nexport type CHashXO = ReturnType<typeof createXOFer>;\n\n/** Wraps hash function, creating an interface on top of it */\nexport function createHasher<T extends Hash<T>>(\n  hashCons: () => Hash<T>\n): {\n  (msg: Input): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(): Hash<T>;\n} {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function createOptHasher<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts?: T): Hash<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts?: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function createXOFer<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts?: T): HashXOF<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts?: T) => hashCons(opts);\n  return hashC;\n}\nexport const wrapConstructor: typeof createHasher = createHasher;\nexport const wrapConstructorWithOpts: typeof createOptHasher = createOptHasher;\nexport const wrapXOFConstructorWithOpts: typeof createXOFer = createXOFer;\n\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return Uint8Array.from(crypto.randomBytes(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n * @deprecated\n */\nimport {\n  SHA224 as SHA224n,\n  sha224 as sha224n,\n  SHA256 as SHA256n,\n  sha256 as sha256n,\n} from './sha2.ts';\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA256: typeof SHA256n = SHA256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha256: typeof sha256n = sha256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA224: typeof SHA224n = SHA224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha224: typeof sha224n = sha224n;\n","/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { type Input, Hash, abytes, aexists, aoutput, clean, createView, toBytes } from './utils.ts';\n\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(\n  view: DataView,\n  byteOffset: number,\n  value: bigint,\n  isLE: boolean\n): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n/** Choice: a ? b : c */\nexport function Chi(a: number, b: number, c: number): number {\n  return (a & b) ^ (~a & c);\n}\n\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a: number, b: number, c: number): number {\n  return (a & b) ^ (a & c) ^ (b & c);\n}\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n\n  readonly blockLen: number;\n  readonly outputLen: number;\n  readonly padOffset: number;\n  readonly isLE: boolean;\n\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(blockLen: number, outputLen: number, padOffset: number, isLE: boolean) {\n    super();\n    this.blockLen = blockLen;\n    this.outputLen = outputLen;\n    this.padOffset = padOffset;\n    this.isLE = isLE;\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    aexists(this);\n    data = toBytes(data);\n    abytes(data);\n    const { view, buffer, blockLen } = this;\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    aoutput(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    clean(this.buffer.subarray(pos));\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest(): Uint8Array {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.destroyed = destroyed;\n    to.finished = finished;\n    to.length = length;\n    to.pos = pos;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.\n * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.\n */\n\n/** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */\nexport const SHA256_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,\n]);\n\n/** Initial SHA224 state. Bits 32..64 of frac part of sqrt of primes 23..53 */\nexport const SHA224_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4,\n]);\n\n/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */\nexport const SHA384_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939,\n  0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4,\n]);\n\n/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */\nexport const SHA512_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n  0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,\n]);\n"],"names":["Object","defineProperty","exports","value","wordlists","_default","require","czech","err","chinese_simplified","chinese_traditional","korean","french","italian","spanish","japanese","JA","portuguese","english","EN","utils_ts_1","HMAC","Hash","constructor","hash","_key","super","finished","destroyed","ahash","key","toBytes","this","iHash","create","update","Error","blockLen","outputLen","pad","Uint8Array","set","length","digest","i","oHash","clean","buf","aexists","digestInto","out","abytes","destroy","_cloneInto","to","getPrototypeOf","clone","hmac","message","password","salt","opts","c","dkLen","DK","PRF","PRFSalt","pbkdf2Init","prfW","arr","view","createView","u","ti","pos","Ti","subarray","setInt32","ui","pbkdf2Output","async","asyncTick","asyncLoop","hmac_ts_1","_password","_salt","_opts","checkOpts","anumber","kdfInputToBytes","globalThis","crypto","undefined","sha2_ts_1","SHA512","sha512","SHA384","sha384","SHA512_224","sha512_224","SHA512_256","sha512_256","add","fromBig","split","U32_MASK64","BigInt","_32n","n","arguments","h","Number","l","lst","le","len","Ah","Uint32Array","Al","toBig","shrSH","_l","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","u64","_md_ts_1","SHA256_K","from","SHA256_W","SHA256","HashMD","A","SHA256_IV","B","C","D","E","F","G","H","get","process","offset","getUint32","W15","W2","s0","rotr","s1","T1","Chi","T2","Maj","roundClean","buffer","SHA224","SHA224_IV","K512","map","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512_IV","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA384_IV","T224_IV","T256_IV","createHasher","sha256_1","sha512_1","pbkdf2_1","utils_1","_wordlists_1","DEFAULT_WORDLIST","INVALID_MNEMONIC","INVALID_ENTROPY","WORDLIST_REQUIRED","normalize","str","lpad","padString","binaryToByte","bin","parseInt","bytesToBinary","bytes","x","toString","join","deriveChecksumBits","entropyBuffer","CS","sha256","Array","slice","mnemonicToEntropy","mnemonic","wordlist","words","bits","word","index","indexOf","dividerIndex","Math","floor","entropyBits","checksumBits","entropyBytes","match","entropy","Buffer","entropyToMnemonic","isBuffer","TypeError","binary","mnemonicToSeedSync","mnemonicBuffer","saltBuffer","res","pbkdf2","mnemonicToSeed","pbkdf2Async","then","generateMnemonic","strength","rng","size","randomBytes","validateMnemonic","e","setDefaultWordlist","language","result","getDefaultWordlist","keys","filter","lang","every","_wordlists_2","isBytes","instance","checkFinished","min","byteOffset","byteLength","_len2","arrays","_key2","fill","DataView","shift","byteSwap","byteSwap32","hasHexBuiltin","toHex","hex","hexes","fromHex","hl","al","array","ai","hi","n1","asciiToBase16","charCodeAt","n2","char","iters","tick","cb","ts","Date","now","diff","nextTick","utf8ToBytes","TextDecoder","decode","data","sum","a","defaults","call","assign","createOptHasher","createXOFer","bytesLength","crypto_1","getRandomValues","ArrayBuffer","isView","name","isSafeInteger","b","_len","lengths","includes","isLE","swap8IfBE","_","padStart","asciis","_0","_9","f","ch","TextEncoder","encode","hashCons","hashC","msg","tmp","sha224","setBigUint64","_u32_max","wh","wl","setUint32","padOffset","take","dataView","aoutput","oview","outLen","state"],"sourceRoot":""}